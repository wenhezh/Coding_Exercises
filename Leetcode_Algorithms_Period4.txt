Day 001, 06/07/2021 Mon

Min Cost Climbing Stairs

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        '''
        Find the minimum cost to reach the top of the floor.
        
          -type : cost (List[int])
          -rtype: int
        '''
        l = len(cost)        # Heigh of the floor
        costed = [0] * (l+1) # Initiate an array. This array is to 
                             # record min cost of climbing to each
                             # step
        cost.append(0)       # Cost at the top is 0
        
        for i in range(2, l+1):
            costed[i] = min(costed[i-1] + cost[i-1], costed[i-2] + cost[i-2]) 
        
        return costed[-1]



Paint House

class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        '''
        Find the minimum cost to paint all houses with no adjacent houses have the same color.
        
          -type : costs (List[List[int]])
          -rtype: int
        '''
        # Create an array with ele = cost of painting [color1, color2, color3], and length of
        # the array = length of costs
        res = [[0, 0, 0] for _ in range(len(costs))]
        res[0] = costs[0]
        
        # Loop costs from start to end and find min costs at each position
        for i in range(1, len(costs)):
            res[i][0] = costs[i][0] + min(res[i-1][1], res[i-1][2])
            res[i][1] = costs[i][1] + min(res[i-1][2], res[i-1][0])
            res[i][2] = costs[i][2] + min(res[i-1][0], res[i-1][1])
        return min(res[-1])

0740. Delete and Earn



Day 002, 06/08/2021 Tue

0490. The Maze

0593. Valid Square



Day 003, 06/09/2021 Wed

0055. Jump Game

0241. Different Ways to Add Parentheses

0316. Remove Duplicate Letters


Day 004, 06/10/2021 Thu

My Calendar I

0739. Daily Temperatures

1405. Longest Happy String



Day 005, 06/11/2021 Fri

Day 006, 06/12/2021 Sat

0390. Elimination Game


Day 007, 06/13/2021 Sun

Day 008, 06/14/2021 Mon

Maximum Units on a Truck

class Solution:
    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        '''
        Find the maximum total number of units that can be put on the truck.
        
            -types:  boxTypes (List[List[int]])
                    truckSize (int)
            -rtype: int
        '''
        # Sort boxTypes based on number of units.
        boxTypes.sort(key = lambda x: x[1])
        
        # Put boxTypes eles from the very end t the truck, until the truck
        # reaches its max capacity
        res = [0, 0]  # First ele = total # of boxes, and second ele = total # of units
        while boxTypes and res[0] + boxTypes[-1][0] <= truckSize:
            res[0] += boxTypes[-1][0]
            res[1] += boxTypes[-1][0]*boxTypes[-1][1]
            boxTypes.pop()
        
        # Check if the truck ca load more boxes
        if boxTypes:
            res[1] += (truckSize - res[0])*boxTypes[-1][1]
            res[0] += truckSize - res[0]
        
        return res[1]

The Maze II



Day 009, 06/15/2021 Tue

Matchsticks to Square

1717. Maximum Score From Removing Substrings


Day 010, 06/16/2021 Wed

Generate Parentheses

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        '''
        Generate all combinations of n pairs of well-formed parentheses.
        
        :type : n (int)
        :rtype: List[str]
        '''

        d = {0: [''],
             1: ['()']}
             
        import itertools
        
        # Iteratively create well-formed parentheses combos from 2 to n
        for i in range(2, n+1):
            res = []
            for j in range(1, i):
                temp = ['('+x[0]+')' + x[1] for x in itertools.product(d[j], d[i-1-j])]
                res.extend(temp)
                temp = [x[0] + '('+x[1]+')' for x in itertools.product(d[j], d[i-1-j])]
                res.extend(temp)
            d[i] = list(set(res))
        return d[n]



Shortest Distance to Target Color




Day 011, 06/17/2021 Thu

Number of Subarrays with Bounded Maximum

1718. Construct the Lexicographically Largest Valid Sequence



Day 012, 06/18/2021 Fri



Day 013, 06/19/2021 Sat

1291. Sequential Digits

class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        '''
        Find the sorted list of all the integers in the range [low, high] inclusive that have sequential digits. 

        -types:  low (int) 
                high (int)
        -rtype: List[int]
        '''
        import math
        
        # Find the smallest integer with sequential digits >= low
        power = int(math.log(low, 10)) 
        start = int('123456789'[-power:])
        while start < low and start < 123456789:
            if start < int('123456789'[-power:]):
                start += int('1'*power)
            else:
                start = int('123456789'[:power+1])
                power += 1
        
        # Find the largest integer with sequential digits <= high
        power = int(math.log(high, 10)) 
        end = int('123456789'[-power-1:])
        while end > high and end > 12:
            if end > int('123456789'[:power+1]):
                end -= int('1'*(power+1))
            else:
                end = int('123456789'[-power:])
                power -= 1
        
        print(start, end)
        # Generate all integers with sequential digits in [start, end]
        res = [start] if start <= end and start >= low and end <= high else []
        while res and res[-1] < end:
            power = int(math.log(res[-1], 10)) 
            if res[-1] < int('123456789'[-power-1:]):
                res.append(res[-1] + int('1'*(power+1)))
                
            else:
                power += 1
                res.append(int('123456789'[:power+1]))
            
        return res
            

        

Day 014, 06/20/2021 Sun
Day 015, 06/21/2021 Mon
Day 016, 06/22/2021 Tue
Day 017, 06/23/2021 Wed
Day 018, 06/24/2021 Thu
Day 019, 06/25/2021 Fri
Day 020, 06/26/2021 Sat
Day 021, 06/27/2021 Sun
Day 022, 06/28/2021 Mon
Day 023, 06/29/2021 Tue
Day 024, 06/30/2021 Wed
Day 025, 07/01/2021 Thu
Day 026, 07/02/2021 Fri
Day 027, 07/03/2021 Sat
Day 028, 07/04/2021 Sun
Day 029, 07/05/2021 Mon
Day 030, 07/06/2021 Tue
Day 031, 07/07/2021 Wed
Day 032, 07/08/2021 Thu
Day 033, 07/09/2021 Fri
Day 034, 07/10/2021 Sat
Day 035, 07/11/2021 Sun
