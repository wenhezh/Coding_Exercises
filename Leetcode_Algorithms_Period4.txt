Day 001, 06/07/2021 Mon

Min Cost Climbing Stairs

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        '''
        Find the minimum cost to reach the top of the floor.
        
          -type : cost (List[int])
          -rtype: int
        '''
        l = len(cost)        # Heigh of the floor
        costed = [0] * (l+1) # Initiate an array. This array is to 
                             # record min cost of climbing to each
                             # step
        cost.append(0)       # Cost at the top is 0
        
        for i in range(2, l+1):
            costed[i] = min(costed[i-1] + cost[i-1], costed[i-2] + cost[i-2]) 
        
        return costed[-1]



Paint House

class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        '''
        Find the minimum cost to paint all houses with no adjacent houses have the same color.
        
          -type : costs (List[List[int]])
          -rtype: int
        '''
        # Create an array with ele = cost of painting [color1, color2, color3], and length of
        # the array = length of costs
        res = [[0, 0, 0] for _ in range(len(costs))]
        res[0] = costs[0]
        
        # Loop costs from start to end and find min costs at each position
        for i in range(1, len(costs)):
            res[i][0] = costs[i][0] + min(res[i-1][1], res[i-1][2])
            res[i][1] = costs[i][1] + min(res[i-1][2], res[i-1][0])
            res[i][2] = costs[i][2] + min(res[i-1][0], res[i-1][1])
        return min(res[-1])

0740. Delete and Earn



Day 002, 06/08/2021 Tue

0490. The Maze

0593. Valid Square



Day 003, 06/09/2021 Wed

0055. Jump Game

0241. Different Ways to Add Parentheses

0316. Remove Duplicate Letters


Day 004, 06/10/2021 Thu

My Calendar I

0739. Daily Temperatures

1405. Longest Happy String



Day 005, 06/11/2021 Fri

Day 006, 06/12/2021 Sat

0390. Elimination Game


Day 007, 06/13/2021 Sun

Day 008, 06/14/2021 Mon

Maximum Units on a Truck

class Solution:
    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        '''
        Find the maximum total number of units that can be put on the truck.
        
            -types:  boxTypes (List[List[int]])
                    truckSize (int)
            -rtype: int
        '''
        # Sort boxTypes based on number of units.
        boxTypes.sort(key = lambda x: x[1])
        
        # Put boxTypes eles from the very end t the truck, until the truck
        # reaches its max capacity
        res = [0, 0]  # First ele = total # of boxes, and second ele = total # of units
        while boxTypes and res[0] + boxTypes[-1][0] <= truckSize:
            res[0] += boxTypes[-1][0]
            res[1] += boxTypes[-1][0]*boxTypes[-1][1]
            boxTypes.pop()
        
        # Check if the truck ca load more boxes
        if boxTypes:
            res[1] += (truckSize - res[0])*boxTypes[-1][1]
            res[0] += truckSize - res[0]
        
        return res[1]

The Maze II



Day 009, 06/15/2021 Tue

Matchsticks to Square

1717. Maximum Score From Removing Substrings


Day 010, 06/16/2021 Wed

Generate Parentheses

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        '''
        Generate all combinations of n pairs of well-formed parentheses.
        
        :type : n (int)
        :rtype: List[str]
        '''

        d = {0: [''],
             1: ['()']}
             
        import itertools
        
        # Iteratively create well-formed parentheses combos from 2 to n
        for i in range(2, n+1):
            res = []
            for j in range(1, i):
                temp = ['('+x[0]+')' + x[1] for x in itertools.product(d[j], d[i-1-j])]
                res.extend(temp)
                temp = [x[0] + '('+x[1]+')' for x in itertools.product(d[j], d[i-1-j])]
                res.extend(temp)
            d[i] = list(set(res))
        return d[n]



Shortest Distance to Target Color




Day 011, 06/17/2021 Thu

Number of Subarrays with Bounded Maximum

1718. Construct the Lexicographically Largest Valid Sequence



Day 012, 06/18/2021 Fri



Day 013, 06/19/2021 Sat

1291. Sequential Digits

class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        '''
        Find the sorted list of all the integers in the range [low, high] inclusive that have sequential digits. 

        -types:  low (int) 
                high (int)
        -rtype: List[int]
        '''
        import math
        
        # Find the smallest integer with sequential digits >= low
        power = int(math.log(low, 10)) 
        start = int('123456789'[-power:])
        while start < low and start < 123456789:
            if start < int('123456789'[-power:]):
                start += int('1'*power)
            else:
                start = int('123456789'[:power+1])
                power += 1
        
        # Find the largest integer with sequential digits <= high
        power = int(math.log(high, 10)) 
        end = int('123456789'[-power-1:])
        while end > high and end > 12:
            if end > int('123456789'[:power+1]):
                end -= int('1'*(power+1))
            else:
                end = int('123456789'[-power:])
                power -= 1
        
        print(start, end)
        # Generate all integers with sequential digits in [start, end]
        res = [start] if start <= end and start >= low and end <= high else []
        while res and res[-1] < end:
            power = int(math.log(res[-1], 10)) 
            if res[-1] < int('123456789'[-power-1:]):
                res.append(res[-1] + int('1'*(power+1)))
                
            else:
                power += 1
                res.append(int('123456789'[:power+1]))
            
        return res
            

        

Day 014, 06/20/2021 Sun

1721. Swapping Nodes in a Linked List


1722. Minimize Hamming Distance After Swap Operations




Day 015, 06/21/2021 Mon

1733. Minimum Number of People to Teach


Day 016, 06/22/2021 Tue

1167. Minimum Cost to Connect Sticks

class Solution:
    def connectSticks(self, sticks: List[int]) -> int:
        '''
        Find the minimum cost of connecting all the given sticks into one stick.
        
        :type - sticks: List[int]
        :rtype- int
        '''
        import heapq
        sticks.sort()
        cost = 0
        
        # Use heap to find the 2 smallest stick and combine them.
        # Then put the combined back to sticks
        # Repeat the process until the is only 1 stick left.
        while True:
            sticks_out = heapq.heappop(sticks)
            
            # Check if sticks is now empty.
            # If yes, then just return cost
            if not sticks: return cost
            
            sticks_out += heapq.heappop(sticks)
            cost += sticks_out
            heapq.heappush(sticks, sticks_out)



Number of Matching Subsequences



All Paths from Source Lead to Destination

class Solution:
    def leadsToDestination(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:








Day 017, 06/23/2021 Wed

Reverse Linked List II

class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        '''
        Reverse the nodes of the list from position left to position right, and return the reversed list.
        
        :types -  head: ListNode
                  left: int
                 right: int
        :rtype - ListNode
        '''        
        curr_pos = 1
        
        # Create a new ListNode and move it to the node with position = left
        t = head
        while t and curr_pos < left:
            t = t.next
            curr_pos += 1 
        mid = None  # Part to reverse
        
        # Reverse the part btw left and right, inclusively
        while curr_pos <= right:
            temp = t
            t = t.next
            temp.next = mid
            mid = temp
            curr_pos += 1
        
        # Combine part not reversed, part reversed, and tail
        p = head
        p_pos = 1
        if left == 1:
            head = mid
        else:
            while p_pos + 1 < left:
                p = p.next
                p_pos += 1
            p.next = mid

        while p and p.next:
            p = p.next
        p.next = t
            
        return head



0139. Word Break



Day 018, 06/24/2021 Thu

Out of Boundary Paths

class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        '''
        Find the number of paths to move the ball out of the grid boundary.
        
            -types:           m (int)
                              n (int) 
                        maxMove (int) 
                       startRow (int)
                    startColumn (int)
            -rtype: int
        '''
        # Initiate a variable to record the number of paths
        self.res = 0
        # Initiate a variable to record if a grid has been visited
        self.visited = set()
        
        # Define a function to move the ball to next grids (left, right, top, or bottom). Determine if
        # current position is out of grid  and maxMove >= 0, then increment self.res.
        def ifOOB(m: int, n: int, moves_remaining: int, currRow: int, currColumn: int) -> None:
            '''
            Determine if adjacent cells are out of boundry and number of remaining moves is still > 0.

                -types:               m (int)
                                      n (int) 
                        moves_remaining (int) 
                               currtRow (int)
                             currColumn (int)
                -rtype: None
            '''
            # Case when current position is out of boundry, then return True
            if currRow == -1 or currRow == m or currColumn == -1 or currColumn == n:
                self.res += 1
            
            # Case when no extra move is available
            elif moves_remaining == 0: return
            
            # Move to all four adjacent cells
            else:
                for dx, dy in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
                    ifOOB(m, n, moves_remaining - 1, currRow + dx, currColumn + dy)
        
        ifOOB(m, n, maxMove, startRow, startColumn)
        return self.res % (10 ** 9 + 7)
        


1091. Shortest Path in Binary Matrix

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        '''
        Find the length of the shortest clear path in grid.
        
            -type : grid (List[List[int]])
            -rtype: int
        '''
        # Case when the top-left cell or the bottom-right is 1, then just -1
        if grid[0][0] or grid[-1][-1]: return -1
        
        # Define some variables
        n = len(grid) # Length of each side of grid
        
        # A n*n matrix to record min steps of a clear path from the top-left cell to current position
        self.steps = [[n*n for _ in range(n)] for _ in range(n)]
        self.steps[0][0] = 1
        
        # Define a function to update min steps of clear path from the top-left to current position
        def minSteps(x:int, y:int, n: int, grid: List[List[int]]) -> None:
            '''
            Update min steps of clear path from top-left to current position
            
                -types:    x (int)
                           y (int)
                           n (int)
                        grid (List[List[int]])
                -rtype: None
            '''
            for dx, dy in [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]]:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < n and 0 <= new_y < n and grid[new_x][new_y] == 0:
                    self.steps[x][y] = min(self.steps[x][y], self.steps[new_x][new_y]+1)
        
        # Loop grid, find the min steps of the bottom-right cell
        for i in range(n):
            for j in range(n):
                minSteps(i, j, n, grid)
        return self.steps[-1][-1] if self.steps[-1][-1] <= n*n else -1
                    





1120. Maximum Average Subtree

class Solution:
    # Define a function to find the number of nodes, and sum of all nodes values, and the max average seen so far
    def sumAndCount(self, root: TreeNode) -> List[List]:
        '''
        Find the number of nodes, and sum of all nodes values, and the max average seen so far

            -type : root (TreeNode)
            -rtype: List[List]
        '''
        # Case when root is null
        if not root: return [0, 0.0, 0.0]

        # Case when only left subtree exists
        elif not root.right: 
            temp = self.sumAndCount(root.left)
            return [1 + temp[0], 1.0*root.val + temp[1], max(temp[2], (1.0*root.val + temp[1])/(1 + temp[0]))]

        # Case when only right subtree exists
        elif not root.left: 
            temp = self.sumAndCount(root.right)
            return [1 + temp[0], 1.0*root.val + temp[1], max(temp[2], (1.0*root.val + temp[1])/(1 + temp[0]))]

        # Case when both left and right subtrees exist
        else:
            t1 = self.sumAndCount(root.right)
            t2 = self.sumAndCount(root.left)
            return [1+t1[0]+t2[0], 1.0*(root.val+t1[1]+t2[1]), max(1.0*(root.val+t1[1]+t2[1])/(1+t1[0]+t2[0]), t1[2], t2[2])]
            
    
    
    def maximumAverageSubtree(self, root: TreeNode) -> float:
        '''
        Find the maximum average value of any subtree of the tree.
        
            -type : root (TreeNode)
            -rtype: float
        '''
        return self.sumAndCount(root)[2]
        
        


Day 019, 06/25/2021 Fri

Redundant Connection



Day 020, 06/26/2021 Sat



Day 021, 06/27/2021 Sun

0207. Course Schedule



1552. Magnetic Force Between Two Balls



Day 022, 06/28/2021 Mon



Day 023, 06/29/2021 Tue

Max Consecutive Ones III

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        '''
        Find the maximum number of consecutive 1's in nums with flipping at most k 0's.
        
            -types: nums (List[int]) 
                       k (int)
            -rtype: int
        '''
        # Use a sliding window to find the range with most consecutive 1's that with flipping at most k 0's
        start = 0         # Start position of the sliding window
        max_l = 0         # Maximum numbers of consecutive 1's with flipping at most k 0's
        zero_counter = 0  # Count occurence of 0's in current sliding window
        
        for i in range(len(nums)):
            if nums[i] == 0:
                # Shrink the window from left to keep 0_counter < 0
                while zero_counter == k:
                    zero_counter -= nums[start] == 0
                    start += 1
                zero_counter += 1
            max_l = max(max_l, i - start + 1)
        
        return max_l

            
            
Day 024, 06/30/2021 Wed

Lowest Common Ancestor of a Binary Tree

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        '''
        Find the lowest common ancestor (LCA) of p and q.
        
            -types: root ('TreeNode')
                       p ('TreeNode') 
                       q ('TreeNode')
            -rtype: 'TreeNode'
        '''
        # Create a dictionary where key = node.val and value = node.val of its parent node
        self.r = {}
        
        # Define a function to find the parent node value for all nodes in the tree
        def findParentNodeValue(root: 'TreeNode', par_node: 'TreeNode') -> None:
            '''
            Find parent node values for all nodes in the tree.
        
                -types:    root ('TreeNode')
                        par_val (int)
                -rtype: None
            '''
            self.r[root] = par_node
            
            if root.left: findParentNodeValue(root.left, root)
            if root.right: findParentNodeValue(root.right, root)
            else: return 
        findParentNodeValue(root, None)
        
        # Find p's path to root
        p_path = []
        curr_node = p
        while curr_node != root:
            p_path.append(curr_node)
            curr_node = self.r[curr_node]
        p_path.append(root)
        
        # Find q's path to root
        q_path = []
        curr_node = q
        while curr_node != root:
            q_path.append(curr_node)
            curr_node = self.r[curr_node]
        q_path.append(root)
        
        # keep popping both p_path and q_path, the last node val is the LCA.
        res = None
        while p_path and q_path and p_path[-1] == q_path[-1]: 
            res = p_path.pop()
            q_path.pop()
        
        return res



Day 025, 07/01/2021 Thu

Gray code



Find Leaves of Binary Tree

class Solution:
    def findLeaves(self, root: TreeNode) -> List[List[int]]:
        '''
        Collect root's nodes from leaves.
        
            -type : root (TreeNode) 
            -rtype: List[List[int]]
        '''
        # Case when root is null
        if not root: return [[]]
        
        self.res = []
        
        # Define a fucntion to remove and collect leaf nodes 
        def removeLeaves(root: TreeNode) -> List[int]:
            '''
            Remove and collect all leaf nodes for root.
        
                -type : root (TreeNode) 
                -rtype: List[int]
            '''
            res = []
            
            if not root: return res
            
            if not (root.left or root.right):
                res.append(root.val)
                root.val = 101
                return res
            if root.left and root.right and root.left.val == 101 and root.right.val == 101:
                res.append(root.val)
                root.val = 101
                return res
            if root.left and root.left.val == 101 and not root.right:
                res.append(root.val)
                root.val = 101
                return res
            if root.right and root.right.val == 101 and not root.left:
                res.append(root.val)
                root.val = 101
                return res
            
            if root.left and root.left.val != 101:
                res.extend(removeLeaves(root.left))
            if root.right and root.right.val != 101:
                res.extend(removeLeaves(root.right))
            
            return res
        
        # Traverse root, from left to right, until we reach all its leaves
        # Append its leaves as a list to self.res, and make all leaves's values = 101
        while root.val != 101:
            self.res.append(removeLeaves(root))
        return self.res
        


Day 026, 07/02/2021 Fri
Day 027, 07/03/2021 Sat
Day 028, 07/04/2021 Sun
Day 029, 07/05/2021 Mon
Day 030, 07/06/2021 Tue
Day 031, 07/07/2021 Wed
Day 032, 07/08/2021 Thu


Day 033, 07/09/2021 Fri

Longest Increasing Subsequence



Reverse Words in a String II

class Solution:
    def reverseWords(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        # Reverse each word inplace in s
        start = 0   # Start position of a word
        i = 0       # Pointer to loop s
        l = len(s)  # Length of s
        
        while i < l:
            if i + 1 < l and s[i + 1] == " " or i == l - 1:
                # Reverse the word
                end = i
                while start < end:
                    s[start], s[end] = s[end], s[start]
                    start += 1
                    end -= 1
            elif s[i] == " ":
                start = i + 1
            i += 1
        
        # Reverse the whole list
        s.reverse()



Day 034, 07/10/2021 Sat



Day 035, 07/11/2021 Sun

1041. Robot Bounded In Circle

class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        '''
        Determine if and only if there exists a circle in the plane such that the robot never leaves the circle.
        
            -type : instructions (str)
            -rtype: bool
        '''
        # Repeat instructions another 4 times, in case the robot goes only 1/4 of a circle with the original instruction
        instructions = 5*instructions
        
        # Define a list of integers, coordinates = [dis_h, dis_v], to record current coordinates of the robot
        coordinates = [0, 0]
        
        # Define a dictionary, position, where key = the coordinates (in tuple) after current instruction, and value = the current instruction
        position = {}
        
        # Define a variable direction, with 4 elements, indicating updated unit vector when receiving a new instruction
        direction = [[0, 1], [1, 0], [0, -1], [-1, 0]]
        # Index + 1 means rotate clockwise
        move_index = 0
        
        # Loop instructions
        for ins in instructions:
            # Move, or rotate the robot            
            if ins == 'R':
                move_index += 1
                move_index %= 4
            elif ins == 'L':
                move_index -= 1
                move_index %= 4
            else:
                coordinates[0] += direction[move_index][0]
                coordinates[1] += direction[move_index][1]
            
            # Check if current current and instruction occurs in position
            if (coordinates[0], coordinates[1]) in position:
                if ins in position[(coordinates[0], coordinates[1])]:
                    return True
                position[(coordinates[0], coordinates[1])].append(ins)
            else:
                position[(coordinates[0], coordinates[1])] = [ins]
            
        return False
        
        






Day 036, 07/12/2021 Mon

Isomorphic Strings

class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        '''
        Determine if ts and t are isomorphic.
        
            -types: s (str)
                    t (str)
            -rtype: bool
        '''
        l = len(s) # Length of s and t
        
        # Create a dictionary, where key = a char in s, and value = the corresponding char in t
        ds = {}
        
        # Create a dictionary, where key = a char in t, and value = the corresponding char in s
        dt = {}
        
        # Loop s and t. 
        # If the current char is not in ds, then put it in d and make its value the corresponding char in t.
        # If the current char is in ds and its corresponding char in t is not the the char in t at current position,
        # then return false. Same procedures on dt.
        for i in range(l):
            if s[i] not in ds:
                ds[s[i]] = t[i]
            elif ds[s[i]] != t[i]:
                return False
                
            if t[i] not in dt:
                dt[t[i]] = s[i]
            elif dt[t[i]] != s[i]:
                return False
        return True
        


0496. Next Greater Element I

class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        '''
        Find the array with length = nums1.length such that each ele is the next greater element of the 
        cooresponding nums1 ele in nums2.
        
            -types: nums1 (List[int])
                    nums2 (List[int])
            -rtype: List[int]
        '''
        # Loop nums2 from right to left. 
        # Create a dictionary, d, with key = current ele in nums2 and value = its next greater element in nums2.
        # In each loop, if current ele < its next ele, then d[current ele] = its next ele. Else, keep search d[d[next ele]]
        # until we see a number > current ele or -1
        l = len(nums2)
        d = {}
        d[nums2[-1]] = -1
        for i in range(l-2, -1, -1):
            next_greater = nums2[i + 1]
            while nums2[i] >= next_greater and next_greater != -1:
                next_greater = d[next_greater]
            d[nums2[i]] = next_greater
        
        # Map the next greater ele for ele in nums1
        return [d[x] for x in nums1]



0503. Next Greater Element II        

class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        '''
        Find next greater number for each integer in nums (a circular integer array)
        
            -type : nums (List[int])
            -rtype: List[int]
        '''
        # Extend nums with another nums
        nums += nums
        
        l = len(nums) # Length of nums
        
        # Create an array with the same length as the new nums, and each ele is None at the beginning
        next_greater_indices = [None for _ in range(l)]
        
        # Loop nums from right to left. Find the next greater ele in nums for all ele.
        for i in range(l-2, -1, -1):
            next_greater_index = i + 1
            while next_greater_index is not None and nums[i] >= nums[next_greater_index]:
                next_greater_index = next_greater_indices[next_greater_index]
            next_greater_indices[i] = next_greater_index
        
        next_greater_indices[l//2:] = [next_greater_indices[i] - l//2 if next_greater_indices[i] is not None and next_greater_indices[i] > l//2 else next_greater_indices[i] for i in range(l//2, l)]
        
        return [nums[next_greater_indices[i]] if next_greater_indices[i] is not None else -1 for i in range(l//2)]



Day 037, 07/13/2021 Tue

Find Peak Element

0973. K Closest Points to Origin

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        '''
        Find the k closest points to the origin (0, 0)
        
            -types: points (List[List[int]]) 
                         k (int)
            -rtype: List[List[int]]
        '''
        # Use heap
        points = [[(x ** 2 + y ** 2) ** 0.5, [x, y]] for x, y in points]
        import heapq
        heapq.heapify(points)
        return [p[1] for p in heapq.nsmallest(k, points)]




Day 038, 07/14/2021 Wed

Custom Sort String

class Solution:
    def customSortString(self, order: str, str: str) -> str:
        '''
        Permutate str based on the the order.
        
            -types: order (str)
                      str (str)
            -rtype: str
        '''
        # Give each char an integer (starting from 0) as their order, and put them in a dict, d
        d = {k:v for v, k in enumerate(order)}
        
        # Create a string, res, with length = len(d) + 1, and each ele is started as an empty string, ''
        res = ['']*(len(d)+1)
        
        # Loop str. Append each ele to the ele in res, where the index of the ele in res = d[the ele in str]
        # If the ele in str is not in d, the append it to the last ele in res
        for s in str:
            if s in d:
                res[d[s]] += s
            else:
                res[-1] += s
        
        return ''.join(res)



Day 039, 07/15/2021 Thu

Valid Triangle Number



Day 040, 07/16/2021 Fri

4Sum

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        '''
        Find all the unique quadruplets nums[a], nums[b], nums[c], nums[d]] sum up to target.
        
            -types:   nums: (List[int])
                    target: (int)
            -rtype: List[List[int]]
        '''
        l = len(nums)   # Length of nums
        
        if l < 4: return []
        
        # Sort nums
        nums.sort()
        
        # Create a dictionary, where key = the sorted tuple of the first two elements,
        # and value = another dictionary with key = the sorted tuple of the last two elements
        d = {}
        
        # Use two loops to find the first two elements
        for i in range(l):
            for j in range(i+1, l):
                # Set a new target, new_target, = target - the two eles
                new_target = target - nums[i] - nums[j]
                
                key = (nums[i], nums[j]) if nums[i] <= nums[j] else (nums[j], nums[i])
                if key not in d:  # Proceed only if this key is not in d
                    d[key] = {}


                    # Use another two pointers, one from the very left and the other
                    # from the very right, to search if any two eles sum up to new_target,
                    # and neither of the two pointers = i or j
                    x, y = j + 1, l - 1
                    while x < y:
                        if x != i and x != j and y != i and y != j and nums[x] + nums[y] == new_target:
                            sub_key = (nums[x], nums[y]) if nums[x] < nums[y] else (nums[y], nums[x])
                            d[key][sub_key] = 1
                            x += 1
                            y -= 1
                        elif nums[x] + nums[y] > new_target:
                            y -= 1
                        else:
                            x += 1
                            
        # Only keep keys in d with non-empty values
        d = [[x, d[x]] for x in d if d[x]]
        
        # Pair keys in d with each of their sub-dict keys
        from itertools import product
        d = [list(product([x[0]], x[1].keys())) for x in d]

        # Combine all quadruplets
        d = [[a+b for a, b in x] for x in d]

        # Convert to a list of lists
        from functools import reduce
        d = reduce(lambda x, y : x + y, d) if d else d
        d = [list(x) for x in d]
        
        return d



Day 041, 07/17/2021 Sat

Range Addition



Day 042, 07/18/2021 Sun


Day 043, 07/19/2021 Mon


Day 044, 07/20/2021 Tue


Day 045, 07/21/2021 Wed



Day 046, 07/22/2021 Thu

Partition Array into Disjoint Intervals



Day 047, 07/23/2021 Fri

Binary Tree Pruning

class Solution:
    def pruneTree(self, root: TreeNode) -> TreeNode:
        '''
        Remove subtrees of root where every all node.val in a subtree are 0.

            -type : root (TreeNode)
            -rtype: TreeNode
        '''
        # Check if current root has left part
        if root and root.left:
            root.left = self.pruneTree(root.left)
        # Check if current root has right part
        if root and root.right:
            root.right = self.pruneTree(root.right)
        
        # Check if current node is a leaf. If yes, and current node.val = 0,
        # then make itself NULL 
        if not (root.left or root.right) and root.val == 0:
            root = None
        
        return root



0142. Linked List Cycle II

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        '''
        Find the node where the cycle begins. If there is no cycle, return null.
            
            -type : head (ListNode)
            -rtype: ListNode
        '''
        # Check if head is empty
        if not head: return None
        
        cycle_length = 0 # Initiate the length of the cycle if it exists
        
        # Check if head has a cycle by using two pointers
        slow, fast = head, head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
            
            # Check if a cycle exists
            if slow == fast:
                # Find cycle_length
                cycle_length = 1
                temp_pointer = slow
                temp_pointer = temp_pointer.next
                while temp_pointer != slow:
                    temp_pointer = temp_pointer.next
                    cycle_length += 1
                break
            
        # No cycle
        if cycle_length == 0: return None
        
        # Start from the vey beginning. Define two pointers, p1 and p2.
        # Move p2 cycle_length steps forward. Then move p1 and p2 at the same time.
        # When p1 and p2 meet, p1 is then the start of the cycle.
        p1, p2 = head, head
        while cycle_length:
            p2 = p2.next
            cycle_length -= 1
        
        while p1 != p2:
            p1 = p1.next
            p2 = p2.next

        return p1



Day 048, 07/24/2021 Sat




Day 049, 07/25/2021 Sun

1737. Change Minimum Characters to Satisfy One of Three Conditions


Day 050, 07/26/2021 Mon
Day 051, 07/27/2021 Tue
Day 052, 07/28/2021 Wed
Day 053, 07/29/2021 Thu
Day 054, 07/30/2021 Fri


Day 055, 07/31/2021 Sat

0549. Binary Tree Longest Consecutive Sequence II




Day 056, 08/01/2021 Sun
Day 057, 08/02/2021 Mon
Day 058, 08/03/2021 Tue
Day 059, 08/04/2021 Wed
Day 060, 08/05/2021 Thu
Day 061, 08/06/2021 Fri
Day 062, 08/07/2021 Sat
Day 063, 08/08/2021 Sun
Day 064, 08/09/2021 Mon
Day 065, 08/10/2021 Tue
Day 066, 08/11/2021 Wed
Day 067, 08/12/2021 Thu
Day 068, 08/13/2021 Fri
Day 069, 08/14/2021 Sat
Day 070, 08/15/2021 Sun
Day 071, 08/16/2021 Mon
Day 072, 08/17/2021 Tue
Day 073, 08/18/2021 Wed
Day 074, 08/19/2021 Thu
Day 075, 08/20/2021 Fri
Day 076, 08/21/2021 Sat
Day 077, 08/22/2021 Sun
Day 078, 08/23/2021 Mon
Day 079, 08/24/2021 Tue
Day 080, 08/25/2021 Wed
Day 081, 08/26/2021 Thu
Day 082, 08/27/2021 Fri
Day 083, 08/28/2021 Sat



Day 084, 08/29/2021 Sun






Day 085, 08/30/2021 Mon
Day 086, 08/31/2021 Tue
Day 087, 09/01/2021 Wed
Day 088, 09/02/2021 Thu
Day 089, 09/03/2021 Fri
Day 090, 09/04/2021 Sat
Day 091, 09/05/2021 Sun

Day 092, 09/06/2021 Mon
Day 093, 09/07/2021 Tue
Day 094, 09/08/2021 Wed
Day 095, 09/09/2021 Thu
Day 096, 09/10/2021 Fri
Day 097, 09/11/2021 Sat
Day 098, 09/12/2021 Sun

