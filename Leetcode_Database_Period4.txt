Day 001, 06/07/2021 Mon

1853. Convert Date Format

select date_format(d.day, '%W, %M %e, %Y') day from Days d;



1873. Calculate Special Bonus

select   employee_id
       , case when mod(employee_id, 2) = 1 and substring(name, 1, 1) <> 'M' then salary
         else 0 end bonus
from Employees
order by employee_id;



1867. Orders With Maximum Quantity Above Average

select distinct order_id
from OrdersDetails
where quantity > (select max(avg_q)
                  from (select sum(o.quantity)/count(distinct o.product_id) avg_q
                        from OrdersDetails o
                        group by order_id
                       ) temp
                 );



1875. Group Employees of the Same Salary

select   t1.employee_id
       , t1.name
       , t1.salary
       , t2.r team_id
from Employees t1
     left join
     (select   e.salary
             , (select count(distinct e0.salary)
                from (select salary
                      from Employees
                      group by salary
                      having count(salary) > 1
                      order by salary) e0
                where e0.salary <= e.salary) r
      from Employees e
      group by e.salary
      having count(e.salary) > 1
      order by e.salary) t2
      on t1.salary = t2.salary
where t2.salary is not NULL
order by team_id, t1.employee_id;



Day 002, 06/08/2021 Tue

1821. Find Customers With Positive Revenue this Year

select customer_id
from Customers
where year = 2021
group by customer_id
having sum(revenue) > 0;



1843. Suspicious Bank Accounts

select distinct table1.account_id
from   (select   t1.account_id
               , y_m
               , case when t1.amount > a1.max_income then 1 
                 else 0 end exceed
         from (select   account_id
                      , date_format(day, '%Y-%m-%d') y_m
                      , sum(amount) amount
              from Transactions
              where type = 'Creditor'
              group by account_id, date_format(day, '%Y-%m')
              order by account_id, y_m) t1
              left join Accounts a1
              on t1.account_id = a1.account_id) table1
      , (select   t2.account_id
                , y_m
                , case when t2.amount > a2.max_income then 1 
                 else 0 end exceed
         from (select   account_id
                      , date_format(day, '%Y-%m-%d') y_m
                      , sum(amount) amount
              from Transactions
              where type = 'Creditor'
              group by account_id, date_format(day, '%Y-%m')
              order by account_id, y_m) t2
              left join Accounts a2
              on t2.account_id = a2.account_id) table2
where table1.account_id = table2.account_id
      and table1.exceed = 1 and table2.exceed = 1
      and ((year(table1.y_m) = year(table2.y_m) and month(table1.y_m)+1 = month(table2.y_m))
           or 
           (year(table1.y_m) = year(table2.y_m) and month(table1.y_m)-1 = month(table2.y_m))
           or
           (year(table1.y_m)-1 = year(table2.y_m) and month(table1.y_m) = 1 and month(table2.y_m) = 12)
           or 
           (year(table1.y_m)+1 = year(table2.y_m) and month(table1.y_m) = 12 and month(table2.y_m) = 1 )
          )
order by table1.account_id;



Day 003, 06/09/2021 Wed

1809. Ad-Free Sessions

select session_id
from Playback
where session_id not in (select p.session_id
                         from   Playback p
                              , Ads a
                         where p.customer_id = a.customer_id
                               and p.start_time <= a.timestamp
                               and a.timestamp <= p.end_time);


1811. Find Interview Candidates

select   name
       , mail
from Users
where user_id in (select   gold_medal user_id
                  from Contests
                  group by gold_medal
                  having count(gold_medal) > 2
                  UNION
                  select t1.user_id
                  from   (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t1
                       , (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t2
                       , (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t3
                  where t1.user_id = t2.user_id and t1.user_id = t3.user_id
                        and t1.contest_id + 1 = t2.contest_id
                        and t2.contest_id + 1 = t3.contest_id);



1831. Maximum Transaction Each Day

select t1.transaction_id
from Transactions t1
     left join 
     (select   date_format(day, '%Y-%m-%d') curr_date
             , max(amount) amount
      from Transactions
      group by date_format(day, '%Y-%m-%d')) t2
     on t1.amount = t2.amount and date_format(t1.day, '%Y-%m-%d') = t2.curr_date
where t2.curr_date is not NULL
order by t1.transaction_id;



Day 004, 06/10/2021 Thu
Day 005, 06/11/2021 Fri
Day 006, 06/12/2021 Sat
Day 007, 06/13/2021 Sun



Day 008, 06/14/2021 Mon

1777. Product's Price for Each Store    

select   distinct p.product_id
       , t1.price store1
       , t2.price store2
       , t3.price store3
from Products p
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store1'
 group by product_id) t1
on p.product_id = t1.product_id
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store2'
 group by product_id) t2
on p.product_id = t2.product_id
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store3'
 group by product_id) t3
on p.product_id = t3.product_id
order by p.product_id;



1789. Primary Department for Each Employee

select   employee_id
       , department_id
from  Employee
group by employee_id
having count(employee_id) = 1
UNION
select   employee_id
       , department_id
from  Employee
where primary_flag = 'Y';



1783. Grand Slam Titles	

select   t1.player_id
       , p.player_name
       , count(t1.player_id) grand_slams_count
from (select Wimbledon player_id
      from Championships
      UNION ALL
      select Fr_open player_id
      from Championships
      UNION ALL
      select US_open player_id
      from Championships
      UNION ALL
      select Au_open player_id
      from Championships) t1
     left join Players p
     on t1.player_id = p.player_id
group by t1.player_id;



Day 009, 06/15/2021 Tue

1795. Rearrange Products Table

select   product_id
       , 'store1' store
       , store1 price
from Products
where store1 is not NULL
UNION ALL
select   product_id
       , 'store2' store
       , store2 price
from Products
where store2 is not NULL
UNION ALL
select   product_id
       , 'store3' store
       , store3 price
from Products
where store3 is not NULL;



1890. The Latest Login in 2020

select   user_id
       , max(time_stamp) last_stamp     
from Logins
where year(time_stamp) = 2020
group by user_id;



1841. League Statistics

select   team_name 
       , matches_played 
       , points
       , goal_for
       , goal_against
       , goal_diff 
from Teams t 
     left join
     (select   g.team_id
             , count(g.team_id) matches_played
             , sum(g.points) points
             , sum(g.goal_for) goal_for
             , sum(g.goal_against) goal_against
             , sum(g.goal_for) - sum(g.goal_against) goal_diff 
      from (select   home_team_id team_id
                   , home_team_goals goal_for
                   , away_team_goals goal_against
                   , case when home_team_goals > away_team_goals then 3
                          when home_team_goals < away_team_goals then 0
                          else 1 end points
            from Matches
            UNION ALL
            select   away_team_id team_id
                   , away_team_goals goal_for
                   , home_team_goals goal_against
                   , case when away_team_goals > home_team_goals then 3
                          when away_team_goals < home_team_goals then 0
                          else 1 end points
            from Matches) g
       group by g.team_id) t0
       on t.team_id = t0.team_id
where t0.matches_played is not NULL
order by points desc, goal_diff desc, team_name;



Day 010, 06/16/2021 Wed

Day 011, 06/17/2021 Thu

Day 012, 06/18/2021 Fri

Day 013, 06/19/2021 Sat

1892. Page Recommendations II

select   user1 user_id 
       , l1.page_id page_id
       , count(l1.page_id) friends_likes
from (select   user1_id user1
            , user2_id user2
      from Friendship
      UNION
      select   user2_id user1
             , user1_id user2
      from Friendship) u1
     left join Likes l1
     on u1.user2 = l1.user_id
     left join Likes l2
     on u1.user1 = l2.user_id 
     and l1.page_id = l2.page_id
where l2.user_id  is NULL
group by user1, l1.page_id;



Day 014, 06/20/2021 Sun
Day 015, 06/21/2021 Mon
Day 016, 06/22/2021 Tue

Day 017, 06/23/2021 Wed

1907. Count Salary Categories

select   c.category
       , ifnull(a.accounts_count, 0) accounts_count
from (select 'Low Salary' category
      UNION 
      select 'Average Salary' category
      UNION 
      select 'High Salary' category) c
     left join 
     (select   category
             , count(category) accounts_count
      from (select case when income < 20000 then 'Low Salary'
                        when income > 50000 then 'High Salary'
                        else 'Average Salary' end category
            from Accounts) t
      group by category) a
     on c.category = a.category;

select   'Low Salary' category
       , ifnull(sum(case when income < 20000 then 1 end), 0) accounts_count
from Accounts
UNION
select   'Average Salary' category
       , ifnull(sum(case when 20000 <= income and income <= 50000 then 1 end), 0) accounts_count
from Accounts
UNION
select   'High Salary' category
       , ifnull(sum(case when income > 50000 then 1 end), 0) accounts_count
from Accounts;



Day 018, 06/24/2021 Thu
Day 019, 06/25/2021 Fri



Day 020, 06/26/2021 Sat

1179. Reformat Department Table

select   id
       , sum(case when month = 'Jan' then revenue end) Jan_Revenue
       , sum(case when month = 'Feb' then revenue end) Feb_Revenue
       , sum(case when month = 'Mar' then revenue end) Mar_Revenue
       , sum(case when month = 'Apr' then revenue end) Apr_Revenue
       , sum(case when month = 'May' then revenue end) May_Revenue
       , sum(case when month = 'Jun' then revenue end) Jun_Revenue
       , sum(case when month = 'Jul' then revenue end) Jul_Revenue
       , sum(case when month = 'Aug' then revenue end) Aug_Revenue
       , sum(case when month = 'Sep' then revenue end) Sep_Revenue
       , sum(case when month = 'Oct' then revenue end) Oct_Revenue
       , sum(case when month = 'Nov' then revenue end) Nov_Revenue
       , sum(case when month = 'Dec' then revenue end) Dec_Revenue
from Department
group by id
order by id;



1132. Reported Posts II

select round(ifnull(100*avg(daily_percent), 0), 2) average_daily_percent
from (select count(r.post_id)/count(a.post_id) daily_percent
      from (select   post_id
                   , action_date
            from Actions
            where extra = 'spam'
            group by post_id, action_date) a
           left join
           Removals r
           on a.post_id = r.post_id
      group by a.action_date) t;



Day 021, 06/27/2021 Sun



Day 022, 06/28/2021 Mon

1917. Leetcodify Friends Recommendations

select   l1.user_id user_id
       , l2.user_id recommended_id 
from   Listens l1
     , Listens l2
where l1.song_id = l2.song_id
      and l1.day = l2.day
      and l1.user_id <> l2.user_id
      and (l1.user_id not in (select user1_id
                              from Friendship
                              where user2_id = l2.user_id))
      and (l2.user_id not in (select user1_id
                              from Friendship
                              where user2_id = l1.user_id))
group by l1.user_id, l2.user_id, l1.day
having count(distinct l1.song_id) > 2;



0185. Department Top Three Salaries

select   d.Name Department
       , e1.Name Employee
       , e1.Salary
from   Employee e1
     , Employee e2
     , Department d
where e1.DepartmentId = e2.DepartmentId
      and e1.Salary <= e2.Salary
      and d.Id = e1.DepartmentId
group by e1.Name
having count(distinct e2.Salary) < 4;



Day 023, 06/29/2021 Tue

115. Market Analysis II

select   u.user_id seller_id
       , case when u.favorite_brand = i.item_brand then 'yes'
              else 'no' end 2nd_item_fav_brand
from  Users u
      left join 
      (select   o1.seller_id
              , o1.item_id
      from   Orders o1
           , Orders o2
      where o1.seller_id = o2.seller_id
            and o1.order_date >= o2.order_date
      group by o1.seller_id, o1.order_date
      having count(o2.order_date) = 2) t
     on u.user_id = t.seller_id
     left join Items i
     on t.item_id = i.item_id
order by u.user_id;



Day 024, 06/30/2021 Wed

Day 025, 07/01/2021 Thu

177. Nth Highest Salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  SET N = N - 1;
  RETURN (
      select Salary 
      from Employee
      group by Salary
      order by Salary desc
      limit 1
      offset N
  );
END



Day 026, 07/02/2021 Fri
Day 027, 07/03/2021 Sat
Day 028, 07/04/2021 Sun
Day 029, 07/05/2021 Mon
Day 030, 07/06/2021 Tue
Day 031, 07/07/2021 Wed
Day 032, 07/08/2021 Thu
Day 033, 07/09/2021 Fri


Day 034, 07/10/2021 Sat

0175. Combine Two Tables

select   p.FirstName
       , p.LastName
       , a.City
       , a.State
from Person p left join Address a
  on p.PersonId = a.PersonId;



0181. Employees Earning More Than Their Managers

select e1.Name Employee
from Employee e1
where e1.salary > (select Salary
                   from Employee e2
                   where e2.Id = e1.ManagerId);



0184. Department Highest Salary

select   d.Name Department
       , e1.Name Employee
       , e1.Salary
from   Employee e1
     , Employee e2
     , Department d
where e1.DepartmentId = e2.DepartmentId
      and e1.Salary <= e2.Salary
      and e1.DepartmentId = d.Id
group by e1.DepartmentId, e1.Name
having count(distinct e2.Salary) = 1;



Day 035, 07/11/2021 Sun



Day 036, 07/12/2021 Mon

The PADS

select case when o1.Occupation = 'Professor' then concat(o1.Name, '(P)')
            when o1.Occupation = 'Singer' then concat(o1.Name, '(S)')
            when o1.Occupation = 'Actor' then concat(o1.Name, '(A)')
            else concat(o1.Name, '(D)') end c1
from OCCUPATIONS o1
order by Name;
select concat("There are a total of ", count(o2.Occupation), " ", LOWER(o2.Occupation), "s.") c1
from OCCUPATIONS o2
group by o2.Occupation
order by count(o2.Occupation), o2.Occupation;



Occupations

select   min(case when Occupation = 'Doctor' then Name end) Doctor
       , min(case when Occupation = 'Professor' then Name end) Professor
       , min(case when Occupation = 'Singer' then Name end) Singer
       , min(case when Occupation = 'Actor' then Name end) Actor
from OCCUPATIONS
group by Name


Day 037, 07/13/2021 Tue

Binary Tree Nodes

select   N
       , case when P is NULL then 'Root'
              when N not in (select P from BST where P is not null) then 'Leaf'
              else 'Inner' end Type
from BST
order by N;



Day 038, 07/14/2021 Wed

Day 039, 07/15/2021 Thu

New Companies

select   c.company_code
       , c.founder
       , ifnull(l.cnt, 0) lead_manger_cnt
       , ifnull(s.cnt, 0) senior_manger_cnt
       , ifnull(m.cnt, 0) manger_cnt
       , ifnull(e.cnt, 0) employee_cnt
from Company c
     left join
     (select   company_code
             , count(distinct lead_manager_code) cnt
      from Lead_Manager
      group by company_code) l
     on c.company_code = l.company_code
     left join
     (select   company_code
             , count(distinct senior_manager_code) cnt
      from Senior_Manager
      group by company_code) s
     on c.company_code = s.company_code
     left join
     (select   company_code
             , count(distinct manager_code) cnt
      from Manager
      group by company_code) m
     on c.company_code = m.company_code
     left join
     (select   company_code
             , count(distinct employee_code) cnt
      from Employee
      group by company_code) e
     on c.company_code = e.company_code
order by c.company_code;
     


Day 040, 07/16/2021 Fri

Weather Observation Station 18

select round(max(LAT_N) - min(LAT_N) + max(LONG_W)- min(LONG_W), 4) distance
from STATION;



Weather Observation Station 19

select round(sqrt((max(LAT_N) - min(LAT_N))*(max(LAT_N) - min(LAT_N)) + (max(LONG_W)- min(LONG_W))*(max(LONG_W)- min(LONG_W))), 4) distance
from STATION;



Weather Observation Station 20

select round(avg(LAT_N), 4) median
from (select   @n := @n + 1 r
             , LAT_N
      from   STATION
           , (select @n := 0) c
      order by LAT_N) t
where r in (floor(((select count(*) from STATION) + 1)/2), ceiling(((select count(*) from STATION) + 1)/2));



Day 041, 07/17/2021 Sat

1934. Confirmation Rate

select   s.user_id 
       , round(ifnull(count(case when action= 'confirmed' then c.user_id end) / count(c.user_id), 0), 2) confirmation_rate
from Signups s left join Confirmations c
     on s.user_id = c.user_id 
group by s.user_id;



The Report

select   s.name Name
       , g.Grade
       , s.Marks
from   Students s
     , Grades g
where s.Marks >= g.Min_Mark and s.Marks <= g.Max_Mark
      and g.Grade >= 8
order by g.Grade desc, s.name;
select   NULL as Name
       , g.Grade
       , s.Marks
from   Students s
     , Grades g
where s.Marks >= g.Min_Mark and s.Marks <= g.Max_Mark
      and g.Grade < 8
order by g.Grade desc, s.Marks;



Day 042, 07/18/2021 Sun



Day 043, 07/19/2021 Mon

1939. Users That Actively Request Confirmation Messages

select c1.user_id
from   Confirmations c1
     , Confirmations c2
where timestampdiff(second, c1.time_stamp, c2.time_stamp) <= 86400
      and timestampdiff(second, c1.time_stamp, c2.time_stamp) > 0
      and c1.user_id = c2.user_id
group by c1.user_id;



Top Competitors

select   t.hacker_id
       , h.name
from   (select   s.hacker_id
               , count(s.hacker_id) cnt
        from Submissions s 
             left join Challenges c
             on s.challenge_id = c.challenge_id
             left join Difficulty d
             on c.difficulty_level = d.difficulty_level
        where s.score = d.score
        group by s.hacker_id) t
      , Hackers h
where t.hacker_id = h.hacker_id
      and t.cnt > 1
order by t.cnt desc, t.hacker_id;




Day 044, 07/20/2021 Tue
Day 045, 07/21/2021 Wed
Day 046, 07/22/2021 Thu


Day 047, 07/23/2021 Fri
Day 048, 07/24/2021 Sat
Day 049, 07/25/2021 Sun
Day 050, 07/26/2021 Mon
Day 051, 07/27/2021 Tue
Day 052, 07/28/2021 Wed
Day 053, 07/29/2021 Thu
Day 054, 07/30/2021 Fri
Day 055, 07/31/2021 Sat
Day 056, 08/01/2021 Sun
Day 057, 08/02/2021 Mon
Day 058, 08/03/2021 Tue
Day 059, 08/04/2021 Wed
Day 060, 08/05/2021 Thu
Day 061, 08/06/2021 Fri
Day 062, 08/07/2021 Sat
Day 063, 08/08/2021 Sun

Day 064, 08/09/2021 Mon
Day 065, 08/10/2021 Tue
Day 066, 08/11/2021 Wed
Day 067, 08/12/2021 Thu
Day 068, 08/13/2021 Fri
Day 069, 08/14/2021 Sat
Day 070, 08/15/2021 Sun

