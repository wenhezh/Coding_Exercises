Day 001, 06/07/2021 Mon

1853. Convert Date Format

select date_format(d.day, '%W, %M %e, %Y') day from Days d;



1873. Calculate Special Bonus

select   employee_id
       , case when mod(employee_id, 2) = 1 and substring(name, 1, 1) <> 'M' then salary
         else 0 end bonus
from Employees
order by employee_id;



1867. Orders With Maximum Quantity Above Average

select distinct order_id
from OrdersDetails
where quantity > (select max(avg_q)
                  from (select sum(o.quantity)/count(distinct o.product_id) avg_q
                        from OrdersDetails o
                        group by order_id
                       ) temp
                 );



1875. Group Employees of the Same Salary

select   t1.employee_id
       , t1.name
       , t1.salary
       , t2.r team_id
from Employees t1
     left join
     (select   e.salary
             , (select count(distinct e0.salary)
                from (select salary
                      from Employees
                      group by salary
                      having count(salary) > 1
                      order by salary) e0
                where e0.salary <= e.salary) r
      from Employees e
      group by e.salary
      having count(e.salary) > 1
      order by e.salary) t2
      on t1.salary = t2.salary
where t2.salary is not NULL
order by team_id, t1.employee_id;



Day 002, 06/08/2021 Tue

1821. Find Customers With Positive Revenue this Year

select customer_id
from Customers
where year = 2021
group by customer_id
having sum(revenue) > 0;



1843. Suspicious Bank Accounts

select distinct table1.account_id
from   (select   t1.account_id
               , y_m
               , case when t1.amount > a1.max_income then 1 
                 else 0 end exceed
         from (select   account_id
                      , date_format(day, '%Y-%m-%d') y_m
                      , sum(amount) amount
              from Transactions
              where type = 'Creditor'
              group by account_id, date_format(day, '%Y-%m')
              order by account_id, y_m) t1
              left join Accounts a1
              on t1.account_id = a1.account_id) table1
      , (select   t2.account_id
                , y_m
                , case when t2.amount > a2.max_income then 1 
                 else 0 end exceed
         from (select   account_id
                      , date_format(day, '%Y-%m-%d') y_m
                      , sum(amount) amount
              from Transactions
              where type = 'Creditor'
              group by account_id, date_format(day, '%Y-%m')
              order by account_id, y_m) t2
              left join Accounts a2
              on t2.account_id = a2.account_id) table2
where table1.account_id = table2.account_id
      and table1.exceed = 1 and table2.exceed = 1
      and ((year(table1.y_m) = year(table2.y_m) and month(table1.y_m)+1 = month(table2.y_m))
           or 
           (year(table1.y_m) = year(table2.y_m) and month(table1.y_m)-1 = month(table2.y_m))
           or
           (year(table1.y_m)-1 = year(table2.y_m) and month(table1.y_m) = 1 and month(table2.y_m) = 12)
           or 
           (year(table1.y_m)+1 = year(table2.y_m) and month(table1.y_m) = 12 and month(table2.y_m) = 1 )
          )
order by table1.account_id;



Day 003, 06/09/2021 Wed

1809. Ad-Free Sessions

select session_id
from Playback
where session_id not in (select p.session_id
                         from   Playback p
                              , Ads a
                         where p.customer_id = a.customer_id
                               and p.start_time <= a.timestamp
                               and a.timestamp <= p.end_time);


1811. Find Interview Candidates

select   name
       , mail
from Users
where user_id in (select   gold_medal user_id
                  from Contests
                  group by gold_medal
                  having count(gold_medal) > 2
                  UNION
                  select t1.user_id
                  from   (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t1
                       , (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t2
                       , (select   gold_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   silver_medal user_id
                                 , contest_id
                          from Contests
                          UNION
                          select   bronze_medal user_id
                                 , contest_id
                          from Contests) t3
                  where t1.user_id = t2.user_id and t1.user_id = t3.user_id
                        and t1.contest_id + 1 = t2.contest_id
                        and t2.contest_id + 1 = t3.contest_id);



1831. Maximum Transaction Each Day

select t1.transaction_id
from Transactions t1
     left join 
     (select   date_format(day, '%Y-%m-%d') curr_date
             , max(amount) amount
      from Transactions
      group by date_format(day, '%Y-%m-%d')) t2
     on t1.amount = t2.amount and date_format(t1.day, '%Y-%m-%d') = t2.curr_date
where t2.curr_date is not NULL
order by t1.transaction_id;



Day 004, 06/10/2021 Thu
Day 005, 06/11/2021 Fri
Day 006, 06/12/2021 Sat
Day 007, 06/13/2021 Sun



Day 008, 06/14/2021 Mon

1777. Product's Price for Each Store    

select   distinct p.product_id
       , t1.price store1
       , t2.price store2
       , t3.price store3
from Products p
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store1'
 group by product_id) t1
on p.product_id = t1.product_id
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store2'
 group by product_id) t2
on p.product_id = t2.product_id
left join 
(select   product_id 
       , sum(price) price
 from Products
 where store = 'store3'
 group by product_id) t3
on p.product_id = t3.product_id
order by p.product_id;



1789. Primary Department for Each Employee

select   employee_id
       , department_id
from  Employee
group by employee_id
having count(employee_id) = 1
UNION
select   employee_id
       , department_id
from  Employee
where primary_flag = 'Y';



1783. Grand Slam Titles	

select   t1.player_id
       , p.player_name
       , count(t1.player_id) grand_slams_count
from (select Wimbledon player_id
      from Championships
      UNION ALL
      select Fr_open player_id
      from Championships
      UNION ALL
      select US_open player_id
      from Championships
      UNION ALL
      select Au_open player_id
      from Championships) t1
     left join Players p
     on t1.player_id = p.player_id
group by t1.player_id;



Day 009, 06/15/2021 Tue

1795. Rearrange Products Table

select   product_id
       , 'store1' store
       , store1 price
from Products
where store1 is not NULL
UNION ALL
select   product_id
       , 'store2' store
       , store2 price
from Products
where store2 is not NULL
UNION ALL
select   product_id
       , 'store3' store
       , store3 price
from Products
where store3 is not NULL;



1890. The Latest Login in 2020

select   user_id
       , max(time_stamp) last_stamp     
from Logins
where year(time_stamp) = 2020
group by user_id;



1841. League Statistics

select   team_name 
       , matches_played 
       , points
       , goal_for
       , goal_against
       , goal_diff 
from Teams t 
     left join
     (select   g.team_id
             , count(g.team_id) matches_played
             , sum(g.points) points
             , sum(g.goal_for) goal_for
             , sum(g.goal_against) goal_against
             , sum(g.goal_for) - sum(g.goal_against) goal_diff 
      from (select   home_team_id team_id
                   , home_team_goals goal_for
                   , away_team_goals goal_against
                   , case when home_team_goals > away_team_goals then 3
                          when home_team_goals < away_team_goals then 0
                          else 1 end points
            from Matches
            UNION ALL
            select   away_team_id team_id
                   , away_team_goals goal_for
                   , home_team_goals goal_against
                   , case when away_team_goals > home_team_goals then 3
                          when away_team_goals < home_team_goals then 0
                          else 1 end points
            from Matches) g
       group by g.team_id) t0
       on t.team_id = t0.team_id
where t0.matches_played is not NULL
order by points desc, goal_diff desc, team_name;



Day 010, 06/16/2021 Wed

Day 011, 06/17/2021 Thu

Day 012, 06/18/2021 Fri

Day 013, 06/19/2021 Sat

1892. Page Recommendations II

select   user1 user_id 
       , l1.page_id page_id
       , count(l1.page_id) friends_likes
from (select   user1_id user1
            , user2_id user2
      from Friendship
      UNION
      select   user2_id user1
             , user1_id user2
      from Friendship) u1
     left join Likes l1
     on u1.user2 = l1.user_id
     left join Likes l2
     on u1.user1 = l2.user_id 
     and l1.page_id = l2.page_id
where l2.user_id  is NULL
group by user1, l1.page_id;



Day 014, 06/20/2021 Sun
Day 015, 06/21/2021 Mon
Day 016, 06/22/2021 Tue

Day 017, 06/23/2021 Wed

1907. Count Salary Categories

select   c.category
       , ifnull(a.accounts_count, 0) accounts_count
from (select 'Low Salary' category
      UNION 
      select 'Average Salary' category
      UNION 
      select 'High Salary' category) c
     left join 
     (select   category
             , count(category) accounts_count
      from (select case when income < 20000 then 'Low Salary'
                        when income > 50000 then 'High Salary'
                        else 'Average Salary' end category
            from Accounts) t
      group by category) a
     on c.category = a.category;

select   'Low Salary' category
       , ifnull(sum(case when income < 20000 then 1 end), 0) accounts_count
from Accounts
UNION
select   'Average Salary' category
       , ifnull(sum(case when 20000 <= income and income <= 50000 then 1 end), 0) accounts_count
from Accounts
UNION
select   'High Salary' category
       , ifnull(sum(case when income > 50000 then 1 end), 0) accounts_count
from Accounts;



Day 018, 06/24/2021 Thu
Day 019, 06/25/2021 Fri



Day 020, 06/26/2021 Sat

1179. Reformat Department Table

select   id
       , sum(case when month = 'Jan' then revenue end) Jan_Revenue
       , sum(case when month = 'Feb' then revenue end) Feb_Revenue
       , sum(case when month = 'Mar' then revenue end) Mar_Revenue
       , sum(case when month = 'Apr' then revenue end) Apr_Revenue
       , sum(case when month = 'May' then revenue end) May_Revenue
       , sum(case when month = 'Jun' then revenue end) Jun_Revenue
       , sum(case when month = 'Jul' then revenue end) Jul_Revenue
       , sum(case when month = 'Aug' then revenue end) Aug_Revenue
       , sum(case when month = 'Sep' then revenue end) Sep_Revenue
       , sum(case when month = 'Oct' then revenue end) Oct_Revenue
       , sum(case when month = 'Nov' then revenue end) Nov_Revenue
       , sum(case when month = 'Dec' then revenue end) Dec_Revenue
from Department
group by id
order by id;



1132. Reported Posts II

select round(ifnull(100*avg(daily_percent), 0), 2) average_daily_percent
from (select count(r.post_id)/count(a.post_id) daily_percent
      from (select   post_id
                   , action_date
            from Actions
            where extra = 'spam'
            group by post_id, action_date) a
           left join
           Removals r
           on a.post_id = r.post_id
      group by a.action_date) t;



Day 021, 06/27/2021 Sun



Day 022, 06/28/2021 Mon

1917. Leetcodify Friends Recommendations

select   l1.user_id user_id
       , l2.user_id recommended_id 
from   Listens l1
     , Listens l2
where l1.song_id = l2.song_id
      and l1.day = l2.day
      and l1.user_id <> l2.user_id
      and (l1.user_id not in (select user1_id
                              from Friendship
                              where user2_id = l2.user_id))
      and (l2.user_id not in (select user1_id
                              from Friendship
                              where user2_id = l1.user_id))
group by l1.user_id, l2.user_id, l1.day
having count(distinct l1.song_id) > 2;



0185. Department Top Three Salaries

select   d.Name Department
       , e1.Name Employee
       , e1.Salary
from   Employee e1
     , Employee e2
     , Department d
where e1.DepartmentId = e2.DepartmentId
      and e1.Salary <= e2.Salary
      and d.Id = e1.DepartmentId
group by e1.Name
having count(distinct e2.Salary) < 4;



Day 023, 06/29/2021 Tue

115. Market Analysis II

select   u.user_id seller_id
       , case when u.favorite_brand = i.item_brand then 'yes'
              else 'no' end 2nd_item_fav_brand
from  Users u
      left join 
      (select   o1.seller_id
              , o1.item_id
      from   Orders o1
           , Orders o2
      where o1.seller_id = o2.seller_id
            and o1.order_date >= o2.order_date
      group by o1.seller_id, o1.order_date
      having count(o2.order_date) = 2) t
     on u.user_id = t.seller_id
     left join Items i
     on t.item_id = i.item_id
order by u.user_id;



Day 024, 06/30/2021 Wed

Day 025, 07/01/2021 Thu

177. Nth Highest Salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  SET N = N - 1;
  RETURN (
      select Salary 
      from Employee
      group by Salary
      order by Salary desc
      limit 1
      offset N
  );
END



Day 026, 07/02/2021 Fri
Day 027, 07/03/2021 Sat
Day 028, 07/04/2021 Sun
Day 029, 07/05/2021 Mon
Day 030, 07/06/2021 Tue
Day 031, 07/07/2021 Wed
Day 032, 07/08/2021 Thu
Day 033, 07/09/2021 Fri


Day 034, 07/10/2021 Sat

0175. Combine Two Tables

select   p.FirstName
       , p.LastName
       , a.City
       , a.State
from Person p left join Address a
  on p.PersonId = a.PersonId;



0181. Employees Earning More Than Their Managers

select e1.Name Employee
from Employee e1
where e1.salary > (select Salary
                   from Employee e2
                   where e2.Id = e1.ManagerId);



0184. Department Highest Salary

select   d.Name Department
       , e1.Name Employee
       , e1.Salary
from   Employee e1
     , Employee e2
     , Department d
where e1.DepartmentId = e2.DepartmentId
      and e1.Salary <= e2.Salary
      and e1.DepartmentId = d.Id
group by e1.DepartmentId, e1.Name
having count(distinct e2.Salary) = 1;



Day 035, 07/11/2021 Sun



Day 036, 07/12/2021 Mon

The PADS

select case when o1.Occupation = 'Professor' then concat(o1.Name, '(P)')
            when o1.Occupation = 'Singer' then concat(o1.Name, '(S)')
            when o1.Occupation = 'Actor' then concat(o1.Name, '(A)')
            else concat(o1.Name, '(D)') end c1
from OCCUPATIONS o1
order by Name;
select concat("There are a total of ", count(o2.Occupation), " ", LOWER(o2.Occupation), "s.") c1
from OCCUPATIONS o2
group by o2.Occupation
order by count(o2.Occupation), o2.Occupation;



Occupations

select   min(case when Occupation = 'Doctor' then Name end) Doctor
       , min(case when Occupation = 'Professor' then Name end) Professor
       , min(case when Occupation = 'Singer' then Name end) Singer
       , min(case when Occupation = 'Actor' then Name end) Actor
from OCCUPATIONS
group by Name


Day 037, 07/13/2021 Tue

Binary Tree Nodes

select   N
       , case when P is NULL then 'Root'
              when N not in (select P from BST where P is not null) then 'Leaf'
              else 'Inner' end Type
from BST
order by N;



Day 038, 07/14/2021 Wed

Day 039, 07/15/2021 Thu

New Companies

select   c.company_code
       , c.founder
       , ifnull(l.cnt, 0) lead_manger_cnt
       , ifnull(s.cnt, 0) senior_manger_cnt
       , ifnull(m.cnt, 0) manger_cnt
       , ifnull(e.cnt, 0) employee_cnt
from Company c
     left join
     (select   company_code
             , count(distinct lead_manager_code) cnt
      from Lead_Manager
      group by company_code) l
     on c.company_code = l.company_code
     left join
     (select   company_code
             , count(distinct senior_manager_code) cnt
      from Senior_Manager
      group by company_code) s
     on c.company_code = s.company_code
     left join
     (select   company_code
             , count(distinct manager_code) cnt
      from Manager
      group by company_code) m
     on c.company_code = m.company_code
     left join
     (select   company_code
             , count(distinct employee_code) cnt
      from Employee
      group by company_code) e
     on c.company_code = e.company_code
order by c.company_code;
     


Day 040, 07/16/2021 Fri

Weather Observation Station 18

select round(max(LAT_N) - min(LAT_N) + max(LONG_W)- min(LONG_W), 4) distance
from STATION;



Weather Observation Station 19

select round(sqrt((max(LAT_N) - min(LAT_N))*(max(LAT_N) - min(LAT_N)) + (max(LONG_W)- min(LONG_W))*(max(LONG_W)- min(LONG_W))), 4) distance
from STATION;



Weather Observation Station 20

select round(avg(LAT_N), 4) median
from (select   @n := @n + 1 r
             , LAT_N
      from   STATION
           , (select @n := 0) c
      order by LAT_N) t
where r in (floor(((select count(*) from STATION) + 1)/2), ceiling(((select count(*) from STATION) + 1)/2));



Day 041, 07/17/2021 Sat

1934. Confirmation Rate

select   s.user_id 
       , round(ifnull(count(case when action= 'confirmed' then c.user_id end) / count(c.user_id), 0), 2) confirmation_rate
from Signups s left join Confirmations c
     on s.user_id = c.user_id 
group by s.user_id;



The Report

select   s.name Name
       , g.Grade
       , s.Marks
from   Students s
     , Grades g
where s.Marks >= g.Min_Mark and s.Marks <= g.Max_Mark
      and g.Grade >= 8
order by g.Grade desc, s.name;
select   NULL as Name
       , g.Grade
       , s.Marks
from   Students s
     , Grades g
where s.Marks >= g.Min_Mark and s.Marks <= g.Max_Mark
      and g.Grade < 8
order by g.Grade desc, s.Marks;



Day 042, 07/18/2021 Sun



Day 043, 07/19/2021 Mon

1939. Users That Actively Request Confirmation Messages

select c1.user_id
from   Confirmations c1
     , Confirmations c2
where timestampdiff(second, c1.time_stamp, c2.time_stamp) <= 86400
      and timestampdiff(second, c1.time_stamp, c2.time_stamp) > 0
      and c1.user_id = c2.user_id
group by c1.user_id;



Top Competitors

select   t.hacker_id
       , h.name
from   (select   s.hacker_id
               , count(s.hacker_id) cnt
        from Submissions s 
             left join Challenges c
             on s.challenge_id = c.challenge_id
             left join Difficulty d
             on c.difficulty_level = d.difficulty_level
        where s.score = d.score
        group by s.hacker_id) t
      , Hackers h
where t.hacker_id = h.hacker_id
      and t.cnt > 1
order by t.cnt desc, t.hacker_id;




Day 044, 07/20/2021 Tue
Day 045, 07/21/2021 Wed
Day 046, 07/22/2021 Thu


Day 047, 07/23/2021 Fri

Ollivander's Inventory

select   w0.id
       , t.age
       , t.coins_needed
       , t.power 
from  (select   wp.age
              , w.power 
              , min(w.coins_needed) coins_needed
       from Wands w left join Wands_Property wp
            on w.code = wp.code
       where wp.is_evil = 0
       group by w.power, wp.age) t
       left join 
       Wands w0
       on t.coins_needed = w0.coins_needed and t.power = w0.power
       left join 
       Wands_Property wp0
       on wp0.age = t.age and wp0.code = w0.code
where wp0.is_evil = 0
order by t.power desc, t.age desc



Day 048, 07/24/2021 Sat

Challenges

select   h.hacker_id
       , h.name
       , t.cnt 
from   Hackers h
     , (select  hacker_id
              , count(challenge_id) cnt
       from Challenges
       group by hacker_id) t
where h.hacker_id = t.hacker_id
      and t.cnt = (select count(hacker_id) cnt
                   from Challenges
                   group by hacker_id
                   order by cnt desc
                   limit 1)
      or t.cnt in (select cnt 
                   from (select count(hacker_id) cnt
                         from Challenges
                         group by hacker_id) t1
                   group by cnt
                   having count(cnt) = 1)
order by t.cnt desc, h.hacker_id;


Day 049, 07/25/2021 Sun
Day 050, 07/26/2021 Mon



Day 051, 07/27/2021 Tue

1949. Strong Friendship



Day 052, 07/28/2021 Wed
Day 053, 07/29/2021 Thu
Day 054, 07/30/2021 Fri

Day 055, 07/31/2021 Sat

Placements

select s.name
from Students s
     left join
     Friends f
     on s.ID = f.ID
     left join
     Packages p1
     on s.ID = p1.ID
     left join 
     Packages p2
     on f.Friend_ID = p2.ID
where p2.Salary > p1.Salary
order by p2.Salary;



Day 056, 08/01/2021 Sun



Day 057, 08/02/2021 Mon

1951. All the Pairs With the Maximum Number of Common Followers

select   r1.user_id user1_id
       , r2.user_id user2_id
from   Relations r1
     , Relations r2
where r1.user_id < r2.user_id
      and r1.follower_id = r2.follower_id
group by r1.user_id, r2.user_id
having count(*) = (select count(r1.user_id) cnt
                   from   Relations r1
                        , Relations r2
                   where r1.user_id < r2.user_id
                         and r1.follower_id = r2.follower_id
                   group by r1.user_id, r2.user_id
                   order by count(r1.user_id) desc
                   limit 1);


Day 058, 08/03/2021 Tue
Day 059, 08/04/2021 Wed



Day 060, 08/05/2021 Thu

0175. Combine Two Tables

select   p.FirstName
       , p.LastName
       , a.City
       , a.State
from Person p left join Address a
     on p.PersonId = a.PersonId;



0181. Employees Earning More Than Their Managers

select e1.Name Employee 
from   Employee e1
     , Employee e2
where e1.ManagerId = e2.Id
      and e1.Salary > e2.Salary;



0185. Department Top Three Salaries

select   d.Name Department
       , e1.Name Employee
       , e1.Salary Salary 
from   Employee e1
     , Employee e2
     , Department d
where e1.DepartmentId = e2.DepartmentId
      and e1.Salary <= e2.Salary
      and d.Id = e1.DepartmentId
group by e1.Name
having count(distinct e2.Salary) < 4;



1757. Recyclable and Low Fat Products

select product_id 
from Products
where (low_fats, recyclable) = ("Y", "Y") ;



0184. Department Highest Salary

select   d.Name Department
       , e.Name Employee
       , e.Salary
from   Employee e
     , (select   DepartmentId
               , max(salary) salary
        from Employee
        group by DepartmentId) t
     , Department d
where e.DepartmentId = d.Id
      and e.Salary = t.Salary 
      and e.DepartmentId = t.DepartmentId



0180. Consecutive Numbers

select l2.Num ConsecutiveNums
from   Logs l1 
     , Logs l2
     , Logs l3
where l1.id = l2.id - 1 and l1.Num = l2.Num
      and l3.id = l2.id + 1 and l2.Num = l3.Num
group by l2.Num;



1412. Find the Quiet Students in All Exams

with Scores as (select   exam_id  
                       , min(score) low
                       , max(score) high
                from Exam
                group by exam_id)
                
select   e.student_id
       , s.student_name
from  Exam e, Student s
where e.student_id not in (select student_id
                           from   Exam e
                                , Scores s
                           where e.exam_id = s.exam_id
                                 and (e.score = s.low or e.score = s.high))
     and e.student_id = s.student_id
group by e.student_id
order by e.student_id;



0610. Triangle Judgement

select   x
       , y 
       , z
       , case when x + y > z and y + z > x then 'Yes'
         else 'No' end triangle 
from triangle;



0178. Rank Scores   

select   s1.Score 
       , count(distinct s2.Score) AS 'Rank'
from   Scores s1
     , Scores s2
where s1.Score <= s2.Score
group by s1.Id
order by s1.Score desc;



Day 061, 08/06/2021 Fri

0262. Trips and Users

with Unbanned_user as (select Users_Id 
                       from Users
                       where Banned = 'No')

select    Request_at 'Day'
        , rate "Cancellation Rate"
from (select   Request_at
             , round(sum(case when Client_Id in (select * from Unbanned_user) 
                                   and Driver_Id in (select * from Unbanned_user)
                                   and Status like 'cancelled_by_%' then 1
                              else 0 end)
                      /
                      sum(case when Client_Id in (select * from Unbanned_user)
                                    and Driver_Id in (select * from Unbanned_user) then 1
                               else 0 end)
               , 2) rate
      from Trips
      where Request_at between "2013-10-01" and "2013-10-03"
      group by Request_at) t 
where rate is not null
 


1270. All People Report to the Given Manager

select employee_id
from Employees e0
where employee_id <> 1 and manager_id = 1
UNION ALL
select e1.employee_id
from   Employees e1
     , Employees e2
where e2.employee_id = e1.manager_id
      and e2.manager_id = 1 
      and e2.employee_id <> 1
UNION ALL    
select e4.employee_id
from   Employees e4
     , Employees e5
     , Employees e6
where e5.employee_id = e4.manager_id
      and e6.employee_id = e5.manager_id
      and e6.manager_id = 1 
      and e6.employee_id <> 1;



0196. Delete Duplicate Emails

delete from Person where (Id, Email) not in (select *
                                             from (select   min(Id) Id
                                                          , Email
                                                   from person
                                                   group by Email) p0);



1179. Reformat Department Table

select   id
       , sum(case when month = 'Jan' then revenue end) Jan_Revenue
       , sum(case when month = 'Feb' then revenue end) Feb_Revenue
       , sum(case when month = 'Mar' then revenue end) Mar_Revenue
       , sum(case when month = 'Apr' then revenue end) Apr_Revenue
       , sum(case when month = 'May' then revenue end) May_Revenue
       , sum(case when month = 'Jun' then revenue end) Jun_Revenue
       , sum(case when month = 'Jul' then revenue end) Jul_Revenue
       , sum(case when month = 'Aug' then revenue end) Aug_Revenue
       , sum(case when month = 'Sep' then revenue end) Sep_Revenue
       , sum(case when month = 'Oct' then revenue end) Oct_Revenue
       , sum(case when month = 'Nov' then revenue end) Nov_Revenue
       , sum(case when month = 'Dec' then revenue end) Dec_Revenue
from Department
group by id;



0626. Exchange Seats

select   case when mod(id, 2) = 0 then id - 1
              when mod(id, 2) = 1 and id + 1 in (select id from seat) then id + 1
         else id end id
       , student
from seat
order by id;



0627. Swap Salary



0597. Friend Requests I: Overall Acceptance Rate

select round(ifnull((select count(*) from (select requester_id, accepter_id from RequestAccepted group by requester_id, accepter_id) n)
                     /
                    (select count(*) from (select sender_id, send_to_id from FriendRequest group by sender_id, send_to_id) d), 0), 2) accept_rate;



1225. Report Contiguous Dates



1398. Customers Who Bought Products A and B but Not C

with Unique_C_O as (select   customer_id 
                           , product_name
                    from Orders
                    group by customer_id, product_name)

select   customer_id
       , customer_name
from Customers
where (customer_id, 'A') in (select * from Unique_C_O)
      and (customer_id, 'B') in (select * from Unique_C_O)
      and (customer_id, 'C') not in (select * from Unique_C_O)
order by customer_id;



Day 062, 08/07/2021 Sat

1336. Number of Transactions per Visit

with all_trans as (select   user_id
                         , visit_date date
                         , 0 transaction_cnt
                  from Visits
                  where (user_id, visit_date) not in (select   user_id
                                                             , transaction_date
                                                      from Transactions)
                  UNION ALL
                  select   user_id
                         , transaction_date date
                         , count(user_id) transaction_cnt
                  from Transactions
                  group by user_id, transaction_date)
    , all_cnt as (select 0 cnt
                  UNION ALL
                  select cast(@num := @num + 1 AS UNSIGNED) cnt
                  from   (select @num := 0) c
                       , Transactions
                  where @num < (select count(user_id) from Transactions group by user_id, transaction_date order by count(user_id) desc limit 1))

select   c.cnt transactions_count
       , ifnull(t.visits_count, 0) visits_count
from  all_cnt c
      left join 
      (select   transaction_cnt
              , count(transaction_cnt) visits_count
       from all_trans
       group by transaction_cnt) t
      on c.cnt = t.transaction_cnt;



1511. Customer Order Frequency

select   c.customer_id
       , c.name 
from   Customers c
     , Product p
     , Orders o
where p.product_id = o.product_id
      and o.customer_id = c.customer_id 
group by c.customer_id
having sum(case when month(o.order_date) = 6 and year(o.order_date) = 2020 then o.quantity * p.price end) >= 100
       and sum(case when month(o.order_date) = 7 and year(o.order_date) = 2020 then o.quantity * p.price end) >= 100;
 
 
 
0197. Rising Temperature

select w1.id
from   Weather w1
     , Weather w2
where datediff(w1.recordDate, w2.recordDate) = 1
      and w1.Temperature > w2.Temperature;



Day 063, 08/08/2021 Sun

Occupations

select   min(case when Occupation = 'Doctor' then Name end) Doctor
       , min(case when Occupation = 'Professor' then Name end) Professor
       , min(case when Occupation = 'Singer' then Name end) Singer
       , min(case when Occupation = 'Actor' then Name end) Actor
from (select    case when Occupation = 'Actor' then @anum := @anum + 1
                     when Occupation = 'Doctor' then @dnum := @dnum + 1
                     when Occupation = 'Professor' then @pnum := @pnum + 1
                     else @snum := @snum + 1 end r
              , Name
              , Occupation
      from   Occupations
           , (select @anum := 0) a
           , (select @dnum := 0) d
           , (select @pnum := 0) p
           , (select @snum := 0) s
      order by Name) modified
group by r;



1699. Number of Calls Between Two Persons

with NewCalls as (select   from_id
                         , to_id
                         , duration
                  from Calls
                  where from_id < to_id
                  UNION ALL
                  select   to_id from_id
                         , from_id to_id
                         , duration
                  from Calls
                  where from_id > to_id)

select   from_id person1
       , to_id person2
       , count(duration) call_count
       , sum(duration) total_duration 
from NewCalls
group by from_id, to_id;



1384. Total Sales Amount by Year

with s as (select   product_id
                  , year
                  , case when year(period_start) > year or year(period_end) < year then 0
                         when year(period_start) < year and year(period_end) > year then 365 * average_daily_sales
                         when year(period_start) = year and year(period_end) = year then (1 + datediff(period_end, period_start)) * average_daily_sales
                         when year(period_start) = year and year(period_end) != year then (1 + datediff(concat(year, '-12-31'), period_start)) * average_daily_sales
                         when year(period_start) != year and year(period_end) = year then (1 + datediff(period_end, concat(year, '-01-01'))) * average_daily_sales
                         end total_amount
           from   (select 2018 year
                   UNION ALL
                   select 2019 year
                   UNION ALL
                   select 2020 year)y
                , Sales s)

select   s.product_id
       , p.product_name
       , cast(s.year as CHAR) report_year
       , s.total_amount
from   s
     , Product p
where s.total_amount > 0 and s.product_id = p.product_id
order by s.product_id, report_year;



0615. Average Salary: Departments VS Company

with company_avg as (select   date_format(pay_date, '%Y-%m') pay_month
                            , avg(amount) amount
                     from salary s
                     group by date_format(pay_date, '%Y-%m'))
    , department_avg as (select   date_format(s.pay_date, '%Y-%m') pay_month
                                , e.department_id
                                , avg(s.amount) amount
                         from salary s left join employee e
                              on s.employee_id = e.employee_id
                         group by e.department_id, date_format(s.pay_date, '%Y-%m')
                        )
select   d.pay_month
       , d.department_id
       , case when d.amount > c.amount then 'higher'
              when d.amount < c.amount then 'lower'
         else 'same' end comparison
from   department_avg d
     , company_avg c
where c.pay_month = d.pay_month
order by d.pay_month, d.department_id;



Day 064, 08/09/2021 Mon

0569. Median Employee Salary

with Employee_temp as (select   Id
                              , Company
                              , Salary
                              , row_number() over(partition by Company order by Salary) r
                              , count(Id) over(partition by Company) comp_total_emp
                       from Employee)

select   Id
       , Company
       , Salary
from Employee_temp
where r in (floor((comp_total_emp + 1)/2), ceiling((comp_total_emp + 1)/2));



0601. Human Traffic of Stadium

with Stadium1 as (select   case when s.people < 100 then @grp := @grp + 1
                                when s.people >= 100 and s.last_people < 100 then @grp := @grp + 1
                           else @grp end grp
                         , s.id 
                         , s.visit_date
                         , s.people
                  from   (select   s1.id
                                 , s1.visit_date
                                 , s1.people
                                 , s2.people last_people
                          from Stadium s1 left join Stadium s2
                          on s1.id = s2.id + 1) s
                       , (select @grp := 0) g
                  )
   , Stadium2 as (select   id 
                         , visit_date
                         , people
                         , count(grp) over(partition by grp) cnt
                  from Stadium1)


select   id
       , visit_date
       , people
from Stadium2
where cnt > 2
order by visit_date;



1596. The Most Frequently Ordered Products for Each Customer

with Customer_Product as (select   customer_id
                                 , product_id 
                                 , count(customer_id) num_of_order
                          from Orders
                          group by customer_id, product_id)
  , Most_Ordered as (select   customer_id
                            , max(num_of_order) max_num_of_order
                     from Customer_Product
                     group by customer_id)

select   c.customer_id 
       , c.product_id
       , p.product_name
from   Products p
     , Customer_Product c
     , Most_Ordered m
where m.customer_id  = c.customer_id 
      and c.num_of_order = m.max_num_of_order
      and c.product_id = p.product_id;



Day 065, 08/10/2021 Tue

1164. Product Price at a Given Date

with Last_Change as (select   product_id
                            , max(change_date) change_date
                     from Products
                     where change_date < '2019-08-17'
                     group by product_id)

select   i.product_id
       , ifnull(p.new_price, 10) price
from (select distinct product_id from Products) i left join Last_Change l
     on i.product_id = l.product_id
     left join Products p
     on l.change_date = p.change_date and l.product_id = p.product_id;



0183. Customers Who Never Order

select name Customers
from Customers c
where not exists (select CustomerId from Orders o where o.CustomerId = c.Id);



1159. Market Analysis II

with Date as (select   seller_id
                     , order_date 
                     , row_number() over(partition by seller_id
                                         order by order_date) r
                     , item_id
              from Orders)
  , Second_Date_Selling as (select   d.seller_id
                                   , d.item_id 
                                   , i.item_brand
                            from   Date d
                                 , Items i
                            where d.r = 2
                                  and d.item_id = i.item_id)

select   u.user_id seller_id
       , case when u.favorite_brand = s.item_brand then 'yes'
         else 'no' end 2nd_item_fav_brand 
from Users u left join Second_Date_Selling s
     on u.user_id = s.seller_id;



1517. Find Users With Valid E-Mails




1741. Find Total Time Spent by Each Employee

select   event_day day
       , emp_id
       , sum(out_time - in_time) total_time
from Employees
group by event_day, emp_id;



0182. Duplicate Emails

select Email 
from Person
group by Email 
having count(Email) > 1;



Day 066, 08/11/2021 Wed

0612. Shortest Distance in a Plane

with Distances as (select sqrt(power(p1.x - p2.x, 2) + power(p1.y - p2.y, 2)) dist
                   from   point_2d p1
                        , point_2d p2
                   where p1.x < p2.x or (p1.x = p2.x and p1.y < p2.y))

select round(ifnull(min(dist), 0), 2) shortest
from Distances;



0596. Classes More Than 5 Students

select class 
from courses
group by class
having count(distinct student) > 4;
 


1651. Hopper Company Queries III

with Existing_info_by_month as (select   year(r.requested_at) request_year
                                       , month(r.requested_at) request_month 
                                       , sum(a.ride_distance) ride_distance
                                       , sum(a.ride_duration) ride_duration
                                from AcceptedRides a left join Rides r
                                     on a.ride_id = r.ride_id
                                group by year(r.requested_at), month(r.requested_at))
    , Calendar_2020 as (select   2020 request_year
                               , cast(@m := @m + 1 as unsigned) request_month
                        from   (select @m := 0) m
                             , information_schema.tables
                        where @m < 12)
    , Info_by_month as (select   c.request_year
                               , c.request_month 
                               , ifnull(e.ride_distance, 0) ride_distance
                               , ifnull(e.ride_duration, 0) ride_duration
                        from Calendar_2020 c left join Existing_info_by_month e
                             on c.request_year = e.request_year 
                             and c.request_month = e.request_month)

select   request_month month
       , round(avg(ride_distance) over(order by request_month ROWS between CURRENT ROW AND 2 FOLLOWING), 2) average_ride_distance
       , round(avg(ride_duration) over(order by request_month ROWS between CURRENT ROW AND 2 FOLLOWING), 2) average_ride_duration
from Info_by_month
where request_year = 2020 
order by request_month
limit 10;



1369. Get the Second Most Recent Activity

with SecondMostRecentActivity as (select   username
                                         , activity  
                                         , startDate
                                         , endDate 
                                  from UserActivity u
                                  group by username
                                  having count(username) = 1
                                  UNION ALL
                                  select   username
                                         , activity  
                                         , startDate
                                         , endDate 
                                  from (select   username
                                               , activity  
                                               , startDate
                                               , endDate
                                               , row_number() over(partition by username
                                                                   order by startDate desc) r
                                        from UserActivity
                                        ) t
                                   where r = 2)

select   username
       , activity  
       , startDate
       , endDate 
from SecondMostRecentActivity;



1083. Sales Analysis II

with Bought_IPhone as (select s.buyer_id
                       from   Sales s
                            , Product p
                       where s.product_id = p.product_id 
                             and product_name = 'iPhone')

select distinct s.buyer_id
from   Sales s
     , Product p
where s.product_id = p.product_id 
      and product_name = 'S8'
      and not exists (select b.buyer_id from Bought_IPhone b where b.buyer_id = s.buyer_id);



1479. Sales by Day of the Week

with OrderSummary as (select   date_format(o.order_date, '%w') order_day
                             , o.quantity
                             , i.item_category Category
                      from Orders o left join Items i
                           on o.item_id = i.item_id)
     
select   c.Category CATEGORY
       , ifnull(sum(case when order_day = 1 then quantity end), 0) MONDAY
       , ifnull(sum(case when order_day = 2 then quantity end), 0) TUESDAY
       , ifnull(sum(case when order_day = 3 then quantity end), 0) WEDNESDAY
       , ifnull(sum(case when order_day = 4 then quantity end), 0) THURSDAY
       , ifnull(sum(case when order_day = 5 then quantity end), 0) FRIDAY
       , ifnull(sum(case when order_day = 6 then quantity end), 0) SATURDAY
       , ifnull(sum(case when order_day = 0 then quantity end), 0) SUNDAY
from (select distinct item_category Category from Items) c left join OrderSummary
     on c.Category = OrderSummary.Category
group by Category
order by Category;


1097. Game Play Analysis V

with Install as (select   player_id
                        , min(event_date) install_dt
                 from Activity
                 group by player_id)

select   i.install_dt
       , count(i.player_id) installs
       , round(ifnull(
         (select count(i2.player_id) cnt
          from   Install i2
               , Activity a
          where i2.player_id = a.player_id
                and datediff(a.event_date, i2.install_dt) = 1
                and i2.install_dt = i.install_dt)
         /
         count(i.player_id), 0), 2) Day1_retention
from Install i
group by i.install_dt;



Day 067, 08/12/2021 Thu

0585. Investments in 2016

with GoodID as (select PID
                 from insurance
                 where TIV_2015 in (select TIV_2015 
                                    from insurance 
                                    group by TIV_2015 
                                    having count(TIV_2015) > 1)
                       and (LAT, LON) in (select   LAT
                                                 , LON 
                                          from insurance
                                          group by LAT, LON 
                                          having count(LAT) = 1))
      
select round(sum(TIV_2016), 2) TIV_2016
from insurance
where PID in (select PID from GoodID);



1112. Highest Grade For Each Student

find the course with the smallest course_id. The output must be sorted by increasing student_id.


with HighestGrade as (select   student_id 
                             , max(grade) highest_grade
                      from Enrollments
                      group by student_id)

select   student_id
       , min(course_id) course_id
       , grade
from Enrollments e
where exists (select   h.student_id 
                     , h.highest_grade 
              from HighestGrade h
              where h.student_id  = e.student_id
                     and h.highest_grade = e.grade)
group by student_id
order by student_id;


1212. Team Scores in Football Tournament

with Points as (select   host_team
                       , guest_team 
                       , case when host_goals > guest_goals then 3
                              when host_goals < guest_goals then 0
                         else 1 end host_point  
                       , case when host_goals < guest_goals then 3
                              when host_goals > guest_goals then 0
                         else 1 end guest_point
                from Matches)
   , TotalPoints as (select   host_team team_id
                            , host_point num_points
                     from Points
                     UNION ALL
                     select   guest_team team_id
                            , guest_point num_points
                     from Points)

select   t.team_id
       , t.team_name
       , ifnull(sum(p.num_points), 0) num_points
from Teams t left join TotalPoints p
  on p.team_id = t.team_id
group by t.team_id
order by sum(p.num_points) desc, p.team_id;



Day 068, 08/13/2021 Fri

0586. Customer Placing the Largest Number of Orders

select customer_number
from Orders
group by customer_number
order by count(customer_number) desc
limit 1;



1241. Number of Comments per Post

select   s.post_id 
       , count(t.parent_id) number_of_comments 
from (select distinct sub_id post_id 
      from Submissions
      where parent_id is NULL) s
     left join 
     (select  parent_id
            , sub_id
      from Submissions
      where parent_id is not NULL
      group by sub_id, parent_id) t
     on s.post_id = t.parent_id
group by s.post_id 
order by s.post_id;



1783. Grand Slam Titles

with Champions as (select Wimbledon player_id
                   from Championships
                   UNION ALL
                   select Fr_open player_id
                   from Championships
                   UNION ALL
                   select US_open player_id
                   from Championships
                   UNION ALL
                   select Au_open player_id
                   from Championships)

select   p.player_id
       , p.player_name
       , count(t.player_id) grand_slams_count
from   Players p
     , Champions
where p.player_id = t.player_id
group by t.player_id;



Day 069, 08/14/2021 Sat

1285. Find the Start and End Number of Continuous Ranges

with NewLog as (select   l1.log_id 
                       , l0.log_id prev_id
                       , case when l0.log_id is NULL then @num := @num + 1
                       else @num end grp
                from   Logs l1 left join Logs l0
                       on l1.log_id - 1 = l0.log_id   
                     , (select @num := 0) c)

select   min(log_id) start_id
       , max(log_id) end_id
from NewLog
group by grp
order by start_id;



0618. Students Report By Geography


with StudentRank as (select   name 
                            , continent
                            , row_number() over(partition by continent
                                                order by name) r
                    from student)

select   min(case when continent = 'America' then name end) America
       , min(case when continent = 'Asia' then name end) Asia
       , min(case when continent = 'Europe' then name end) Europe
from StudentRank
group by r
order by r;



Day 070, 08/15/2021 Sun
Day 071, 08/16/2021 Mon
Day 072, 08/17/2021 Tue


Day 073, 08/18/2021 Wed

1918 · The height of the second tallest player

select (select distinct height
        from players
        order by height desc
        limit 1
        offset 1) second_height;



2635. The use of optimistic locks and pessimistic locks (I)



Day 074, 08/19/2021 Thu

2070. Search for the name of a course created later than the creation time of any of the specified teacher's courses

select   t.name
       , t.age
       , t.country
from teachers t
     inner join 
     (select   country
             , max(age) age
      from teachers
      group by country) t0
     on t.country = t0.country
     and t.age = t0.age;



2077. Search for information on courses and instructors with the highest number of students

select   c.name course_name	
       , c.student_count	
       , t.name teacher_name
from   courses c
     , teachers t
where student_count = (select max(student_count) from courses)
      and t.id = c.teacher_id;



Day 075, 08/20/2021 Fri



Day 076, 08/21/2021 Sat

1972. First and Last Call On the Same Day



Day 077, 08/22/2021 Sun

1939 · Resume Delivery I

select distinct name
from students s
where s.id not in (select student_id
                   from   recording r
                        , companies c
                   where c.name = 'Alibaba'
                         and c.id = r.company_id);



1937. Consecutive Empty Boxes : boxes



1942. Two Nearest Saplings

select min(abs(s1.distance - s2.distance)) shortest_distance
from   sapling_distances s1
     , sapling_distances s2
where s1.id <> s2.id
having shortest_distance is not NULL;



2079. Count the total number of students in each teacher's course

select   t.name teacher_name	
       , ifnull(sum(student_count), 0) student_count
from teachers t left join courses c
     on t.id = c.teacher_id
group by t.id;



2074. Search for the names of teachers whose average number of students in classes taught by all teachers exceeds the average number of students in all courses

select t.name
from    teachers t
     ,  (select   teacher_id
                , avg(student_count) avg_student_cnt
         from courses
         group by teacher_id) c
where t.id = c.teacher_id
      and c.avg_student_cnt > (select avg(student_count) from courses);



Day 078, 08/23/2021 Mon

2064. Check course information for courses with more students than Western Venom teachers

select   id	
       , name	
       , student_count	
       , created_at	
       , teacher_id
from courses
where student_count > all(select student_count
                          from courses
                          where teacher_id in (select id 
                                               from teachers
                                               where name = 'Western Venom'));



2069. Search for the course name and number of students in the course with the highest number of students per instructor

select   c.name	
       , c.student_count
from   courses c
     , (select   teacher_id
               , max(student_count) max_student_count
        from courses
        group by teacher_id) t
where c.teacher_id = t.teacher_id and c.student_count = t.max_student_count;



1943. Looking for Students of a Certain Height

select max(height) height
from (select height
      from student_heights
      group by height
      having count(height) = 1) t;



1935. Zhang San's Story II

select name
from classes
where id = (select class_id 
            from students
            where name = 'zhangsan');



Day 079, 08/24/2021 Tue

2048. Search for information on all courses taught by a given teacher

select   c.id
       , c.name
       , c.student_count
       , c.created_at
       , c.teacher_id
from   courses c
     , teachers t
where c.teacher_id = t.id
      and t.name = 'Western Venom';



1936. Zhang San's Story III

select distinct name
from students
where class_id in (select id
                   from classes
                   where teacher_id = (select id
                                       from teachers
                                       where name = 'xujia'));



Day 080, 08/25/2021 Wed
Day 081, 08/26/2021 Thu
Day 082, 08/27/2021 Fri
Day 083, 08/28/2021 Sat
Day 084, 08/29/2021 Sun

Day 085, 08/30/2021 Mon
Day 086, 08/31/2021 Tue
Day 087, 09/01/2021 Wed
Day 088, 09/02/2021 Thu
Day 089, 09/03/2021 Fri
Day 090, 09/04/2021 Sat
Day 091, 09/05/2021 Sun

Day 092, 09/06/2021 Mon
Day 093, 09/07/2021 Tue
Day 094, 09/08/2021 Wed
Day 095, 09/09/2021 Thu
Day 096, 09/10/2021 Fri
Day 097, 09/11/2021 Sat
Day 098, 09/12/2021 Sun
