Day 001, 07/13/2020 Mon
Day 002, 07/14/2020 Tue
Day 003, 07/15/2020 Wed
Day 004, 07/16/2020 Thu
Day 005, 07/17/2020 Fri
Day 006, 07/18/2020 Sat
Day 007, 07/19/2020 Sun
Day 008, 07/20/2020 Mon
Day 009, 07/21/2020 Tue
Day 010, 07/22/2020 Wed
Day 011, 07/23/2020 Thu
Day 012, 07/24/2020 Fri
Day 013, 07/25/2020 Sat
Day 014, 07/26/2020 Sun
Day 015, 07/27/2020 Mon
Day 016, 07/28/2020 Tue
Day 017, 07/29/2020 Wed
Day 018, 07/30/2020 Thu
Day 019, 07/31/2020 Fri
Day 020, 08/01/2020 Sat
Day 021, 08/02/2020 Sun
Day 022, 08/03/2020 Mon
Day 023, 08/04/2020 Tue
Day 024, 08/05/2020 Wed
Day 025, 08/06/2020 Thu
Day 026, 08/07/2020 Fri
Day 027, 08/08/2020 Sat
Day 028, 08/09/2020 Sun
Day 029, 08/10/2020 Mon
Day 030, 08/11/2020 Tue
Day 031, 08/12/2020 Wed
Day 032, 08/13/2020 Thu
Day 033, 08/14/2020 Fri
Day 034, 08/15/2020 Sat
Day 035, 08/16/2020 Sun
Day 036, 08/17/2020 Mon



Day 037, 08/18/2020 Tue

1543. Fix Product Name Format

select   trim(lower(product_name)) product_name
       , date_format(sale_date, "%Y-%m") sale_date
       , count(sale_id) total
from Sales
group by trim(lower(product_name)), date_format(sale_date, "%Y-%m")
order by trim(lower(product_name)), date_format(sale_date, "%Y-%m");



1527. Patients With a Condition

select   patient_id
       , patient_name
       , conditions
from Patients
where conditions like '%DIAB1%';



1532. The Most Recent Three Orders

select   c.name customer_name 
       , c.customer_id
       , l.order_id
       , l.order_date
from (select   o1.order_id
             , o1.order_date
             , o1.customer_id
             , o1.cost
             , count(o2.customer_id) rk
      from   Orders o1
           , Orders o2
      where o1.customer_id = o2.customer_id
            and o1.order_date <= o2.order_date
      group by o1.customer_id, o1.order_date) l
      left join 
      Customers c
      on l.customer_id = c.customer_id
where l.rk < 4
order by c.name, c.customer_id, l.order_date desc;



1549. The Most Recent Orders for Each Product

select   p.product_name
       , p.product_id
       , o.order_id
       , o.order_date 
from Orders o
     left join Products p
     on o.product_id = p.product_id
     left join 
     (select   product_id
             , max(order_date) recent_date
      from Orders 
      group by product_id) l 
      on o.product_id = l.product_id 
      and o.order_date = l.recent_date
where l.recent_date is not NULL
order by p.product_name, p.product_id, o.order_id;


Day 038, 08/19/2020 Wed
Day 039, 08/20/2020 Thu
Day 040, 08/21/2020 Fri
Day 041, 08/22/2020 Sat
Day 042, 08/23/2020 Sun
Day 043, 08/24/2020 Mon



Day 044, 08/25/2020 Tue

1495. Friendly Movies Streamed Last Month

select distinct title
from Content
where Kids_content = 'Y' and content_type = 'Movies'
      and content_id in (select content_id
                         from TVProgram
                         where date_format(program_date, '%Y-%m') = '2020-06');



1511. Customer Order Frequency

select   customer_id
       , name
from Customers
where customer_id in (select customer_id
                      from   orders o
                           , Product p
                      where o.product_id = p.product_id
                            and date_format(o.order_date, '%m') = 6 
                      group by o.customer_id, date_format(o.order_date, '%m')
                      having sum(p.price * o.quantity) >= 100)
       and customer_id in (select customer_id
                           from   orders o
                                , Product p
                           where o.product_id = p.product_id
                                 and date_format(o.order_date, '%m') = 7
                           group by o.customer_id, date_format(o.order_date, '%m')
                           having sum(p.price * o.quantity) >= 100)
group by customer_id ;



1517. Find Users With Valid E-Mails



1501. Countries You Can Safely Invest In

select name country
from (select   co.name
             , c.duration
      from Calls c left join Person p
           on c.caller_id = p.id
           left join Country co
           on substring(phone_number, 1, 3) = co.country_code
      UNION ALL
      select   co.name
             , c.duration
      from Calls c left join Person p
           on c.callee_id = p.id
           left join Country co
           on substring(phone_number, 1, 3) = co.country_code) t
group by name
having avg(duration) > (select avg(duration) global_avg
                        from Calls);



1555. Bank Account Summary

select   u.user_id
       , u.user_name
       , sum(t.amount) credit
       , case when sum(t.amount) >= 0 then 'No'
              else 'Yes' end credit_limit_breached
from   (select   user_id id
               , credit amount
        from Users
        UNION ALL
        select   paid_by id
               , -amount amount
        from Transaction
        UNION ALL
        select   paid_to id
               , amount
        from Transaction) t
     , Users u 
where u.user_id = t.id
group by u.user_id, u.user_name;



Day 045, 08/26/2020 Wed
Day 046, 08/27/2020 Thu
Day 047, 08/28/2020 Fri
Day 048, 08/29/2020 Sat
Day 049, 08/30/2020 Sun
Day 050, 08/31/2020 Mon


Day 051, 09/01/2020 Tue

1565. Unique Orders and Customers Per Month

select    date_format(order_date, '%Y-%m') month  
        , count(order_id) order_count
        , count(distinct customer_id) customer_count 
from Orders
where invoice > 20
group by date_format(order_date, '%Y-%m')
order by date_format(order_date, '%Y-%m');


Day 052, 09/02/2020 Wed
Day 053, 09/03/2020 Thu
Day 054, 09/04/2020 Fri
Day 055, 09/05/2020 Sat
Day 056, 09/06/2020 Sun
Day 057, 09/07/2020 Mon

Day 058, 09/08/2020 Tue

1384. Total Sales Amount by Year

select *
from (select   s.product_id 
             , p.product_name 
             , concat(t.y) report_year
             , case when t.y = year(period_start) and t.y = year(period_end) then (datediff(period_end, period_start) + 1)*average_daily_sales
                    when t.y > year(period_start) and t.y < year(period_end) then 365*average_daily_sales
                    when t.y = year(period_start) and t.y <> year(period_end) then (datediff(str_to_date(concat(t.y, '/12/31'), '%Y/%m/%d'), period_start) + 1)*average_daily_sales
                    when t.y = year(period_end) and t.y <> year(period_start) then (datediff(period_end, str_to_date(concat(t.y, '/01/01'), '%Y/%m/%d')) + 1)*average_daily_sales
                    end total_amount
      from   Sales s
           , (select 2018 y
              UNION
              select 2019 y
              UNION 
              select 2020 y) t
           ,  Product p
      where s.product_id = p.product_id
      order by  product_id , y) temp
where total_amount is not NULL;



1571. Warehouse Manager

select   w.name warehouse_name
       , sum(w.units * p.Width * p.Length * p.Height) volume 
from  Warehouse w left join Products p
      on w.product_id = p.product_id
group by w.name
order by w.name;



1398. Customers Who Bought Products A and B but Not C

select   c.customer_id
       , c.customer_name
from   Customers c
     , Orders o
where c.customer_id = o.customer_id
      and c.customer_id in (select customer_id from Orders where product_name = 'A')
      and c.customer_id in (select customer_id from Orders where product_name = 'B')
      and c.customer_id not in (select customer_id from Orders where product_name = 'C')
group by c.customer_id
order by c.customer_id;


Day 059, 09/09/2020 Wed
Day 060, 09/10/2020 Thu
Day 061, 09/11/2020 Fri
Day 062, 09/12/2020 Sat
Day 063, 09/13/2020 Sun
Day 064, 09/14/2020 Mon



Day 065, 09/15/2020 Tue

1581. Customer Who Visited but Did Not Make Any Transactions




Challenges

select   c.hacker_id
       , h.name
       , x challenges_created
from (select   hacker_id
             , count(challenge_id) cnt
      from Challenges
      group by hacker_id) c
     left join Hackers h
     on c.hacker_id = h.hacker_id 
group by c.cnt
ha
group by hacker_i



Day 066, 09/16/2020 Wed
Day 067, 09/17/2020 Thu
Day 068, 09/18/2020 Fri
Day 069, 09/19/2020 Sat
Day 070, 09/20/2020 Sun



